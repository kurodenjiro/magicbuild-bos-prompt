[["0",{"pageContent":"State.init(\n    {\n        content:props.content||\"It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the though the transition does limit overflow.\",\n        title:props.title||\"Accordion Item #1\"\n    }\n);\n\nreturn (\n    <div class=\"accordion\" id=\"accordionExample\">\n      <div class=\"accordion-item\">\n        <h2 class=\"accordion-header\" id=\"headingOne\">\n          <button\n            class=\"accordion-button\"\n            type=\"button\"\n            data-bs-toggle=\"collapse\"\n            data-bs-target=\"#collapseOne\"\n            aria-expanded=\"true\"\n            aria-controls=\"collapseOne\"\n          >\n            {state.title}\n          </button>\n        </h2>\n        <div\n          id=\"collapseOne\"\n          class=\"accordion-collapse collapse show\"\n          aria-labelledby=\"headingOne\"\n          data-bs-parent=\"#accordionExample\"\n        >\n          <div class=\"accordion-body\">\n            {state.content}\n          </div>\n        </div>\n      </div>\n    </div>\n  );","metadata":{"loc":{"lines":{"from":1,"to":35}}}}],["1",{"pageContent":"return (\n    <div>\n      <div class=\"alert alert-primary\" role=\"alert\">\n        A simple primary alert—check it out!\n      </div>\n      <div class=\"alert alert-secondary\" role=\"alert\">\n        A simple secondary alert—check it out!\n      </div>\n      <div class=\"alert alert-success\" role=\"alert\">\n        A simple success alert—check it out!\n      </div>\n      <div class=\"alert alert-danger\" role=\"alert\">\n        A simple danger alert—check it out!\n      </div>\n      <div class=\"alert alert-warning\" role=\"alert\">\n        A simple warning alert—check it out!\n      </div>\n      <div class=\"alert alert-info\" role=\"alert\">\n        A simple info alert—check it out!\n      </div>\n      <div class=\"alert alert-light\" role=\"alert\">\n        A simple light alert—check it out!\n      </div>\n      <div class=\"alert alert-dark\" role=\"alert\">\n        A simple dark alert—check it out!\n      </div>\n    </div>\n  );","metadata":{"loc":{"lines":{"from":1,"to":28}}}}],["2",{"pageContent":"State.init({\n    img: props.img || \"https://mdbcdn.b-cdn.net/img/new/avatars/2.webp\",\n  });\n  \nreturn (\n    <img\n      src={state.img}\n      class=\"rounded-circle\"\n      style={{ width: \"150px\" }}\n      alt=\"Avatar\"\n    />\n);","metadata":{"loc":{"lines":{"from":1,"to":12}}}}],["3",{"pageContent":"const onClick = () => {};\n\nreturn (\n  <button\n    onClick={onClick}\n    type=\"button\"\n    class=\"btn btn-primary position-relative\"\n  >\n    Inbox\n    <span class=\"position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger\">\n      99+\n      <span class=\"visually-hidden\">unread messages</span>\n    </span>\n  </button>\n);","metadata":{"loc":{"lines":{"from":1,"to":15}}}}],["4",{"pageContent":"return (\n    <div class=\"navbar fixed-bottom navbar-dark bg-primary\">\n      <a class=\"navbar-brand\" href=\"#\">\n        Fixed bottom\n      </a>\n    </div>\n);","metadata":{"loc":{"lines":{"from":1,"to":7}}}}],["5",{"pageContent":"return (\n    <div aria-label=\"breadcrumb\">\n      <ol class=\"breadcrumb\">\n        <li class=\"breadcrumb-item\">\n          <a href=\"#\">Home</a>\n        </li>\n        <li class=\"breadcrumb-item\">\n          <a href=\"#\">Library</a>\n        </li>\n        <li class=\"breadcrumb-item active\" aria-current=\"page\">\n          Data\n        </li>\n      </ol>\n    </div>\n);","metadata":{"loc":{"lines":{"from":1,"to":15}}}}],["6",{"pageContent":"const onClick = () => {};\nreturn (\n  <div class=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\n    <button type=\"button\" onClick={onClick} class=\"btn btn-primary\">\n      Left\n    </button>\n    <button type=\"button\" onClick={onClick} class=\"btn btn-primary\">\n      Middle\n    </button>\n    <button type=\"button\" onClick={onClick} class=\"btn btn-primary\">\n      Right\n    </button>\n  </div>\n);","metadata":{"loc":{"lines":{"from":1,"to":14}}}}],["7",{"pageContent":"const Button = styled.button`\n  border: 0 !important;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 50%;\n  width: 2.5em;\n  height: 2.5em;\n  &:hover {\n    color: DeepSkyBlue;\n    background: rgba(0, 191, 255, 0.1);\n  }\n`;\n\nreturn (\n  <div className=\"d-inline-flex align-items-center\">\n    <Button\n      disabled={!context.accountId}\n      className=\"btn me-1\"\n      title={\"Comment\"}\n      onClick={props.onClick}\n    >\n      <i className={`bi fs-4 bi-chat`} />\n    </Button>\n  </div>\n);","metadata":{"loc":{"lines":{"from":1,"to":26}}}}],["8",{"pageContent":"const activeAccountId = context.accountId;\nconst onClick = () => {\n  const gas = 300000000000000;\n  const deposit = 10000000000000000000000;\n  Near.call([\n    {\n      contractName: \"nft_delegate.joychi.testnet\",\n      methodName: \"nft_mint\",\n      args: {\n        token_id: \"1\",\n        metadata: {\n          title: \"Dragon black\",\n          description: \"Dragon power\",\n          media:\n            \"https://ipfs.io/ipfs/bafkreie6g22yhzlvdpeovkedlkhemjs6qxxqw5rpua67yj3tjww73r6fui\",\n          issued_at: Date.now(),\n        },\n        receiver_id: activeAccountId,\n      },\n      gas: gas,\n      deposit: deposit,\n    },\n  ]);\n};\nreturn (\n  <button type=\"button\" onClick={onClick} class=\"btn btn-primary\">\n    Mint NFT\n  </button>\n);","metadata":{"loc":{"lines":{"from":1,"to":29}}}}],["9",{"pageContent":"State.init({\n    count: 0,\n  });\n  const onClick = () => {\n    State.count + 1;\n  };\n  return (\n    <button type=\"button\" onClick={onClick} class=\"btn btn-primary\">\n      Count\n    </button>\n);","metadata":{"loc":{"lines":{"from":1,"to":11}}}}],["10",{"pageContent":"State.init({\n  background:\n    props.background ||\n    \"https://wallpapers.com/images/featured/anime-4k-background-m1fnxjihqd7ot7lo.jpg\",\n});\nreturn (\n  <div class=\"card\" style={{ width: \"18rem\" }}>\n    <img src={state.background} class=\"card-img-top\" alt=\"background\" />\n    <div class=\"card-body\">\n      <h5 class=\"card-title\">Card title</h5>\n      <p class=\"card-text\">\n        Some quick example text to build on the card title and make up the bulk\n        of the card's content.\n      </p>\n      <a href=\"#\" class=\"btn btn-primary\">\n        Go somewhere\n      </a>\n    </div>\n  </div>\n);","metadata":{"loc":{"lines":{"from":1,"to":20}}}}],["11",{"pageContent":"State.init({\n    img1:\n      props.image1 ||\n      \"https://i.pinimg.com/originals/43/af/d0/43afd01dc42127c352f1fde070cc2be0.jpg\",\n    img2:\n      props.image2 ||\n      \"https://images.hdqwalls.com/wallpapers/anime-girl-sitting-on-the-top-and-watching-the-city-site-b9.jpg\",\n    img3:\n      props.image3 ||\n      \"https://lh4.googleusercontent.com/proxy/DxP7M5u1VqDpK-UhG_FsNALF-_vtjvNGfMRHoVqioHGLNhRl9dD0GwaQXXVrwF_dcYvelvL8G3yUN0N58WY2y2_RoUl8U_Fh1sPefCmg5iv6F53D1BoJdhVBGyQokDu1qTFsDwsCPg\",\n});\nreturn (\n    <div id=\"carouselExample\" class=\"carousel slide\">\n      <div class=\"carousel-inner\">\n        <div class=\"carousel-item active\">\n          <img src={state.img1} class=\"d-block w-100\" alt=\"background\" />\n        </div>\n        <div class=\"carousel-item\">\n          <img src={state.img2} class=\"d-block w-100\" alt=\"background\" />\n        </div>\n        <div class=\"carousel-item\">\n          <img src={state.img3} class=\"d-block w-100\" alt=\"background\" />\n        </div>\n      </div>\n      <button\n        class=\"carousel-control-prev\"\n        type=\"button\"\n        data-bs-target=\"#carouselExample\"\n        data-bs-slide=\"prev\"\n      >\n        <span class=\"carousel-control-prev-icon\" aria-hidden=\"true\"></span>\n        <span class=\"visually-hidden\">Previous</span>\n      </button>\n      <button\n        class=\"carousel-control-next\"\n        type=\"button\"\n        data-bs-target=\"#carouselExample\"\n        data-bs-slide=\"next\"\n      >\n        <span class=\"carousel-control-next-icon\" aria-hidden=\"true\"></span>\n        <span class=\"visually-hidden\">Next</span>\n      </button>\n    </div>\n);","metadata":{"loc":{"lines":{"from":1,"to":44}}}}],["12",{"pageContent":"State.init({\n    value: \"\",\n    });\n    const onChange = (e) => {\n    State.update({\n        value: e.target.value,\n    });\n    };\n    const Container = styled.div`\n    #chat1 .form-outline .form-control~.form-notch div {\n    pointer-events: none;\n    border: 1px solid;\n    border-color: #eee;\n    box-sizing: border-box;\n    background: transparent;\n    }\n\n    #chat1 .form-outline .form-control~.form-notch .form-notch-leading {\n    left: 0;\n    top: 0;\n    height: 100%;\n    border-right: none;\n    border-radius: .65rem 0 0 .65rem;\n    }\n\n    #chat1 .form-outline .form-control~.form-notch .form-notch-middle {\n    flex: 0 0 auto;\n    max-width: calc(100% - 1rem);\n    height: 100%;\n    border-right: none;\n    border-left: none;\n    }\n\n    #chat1 .form-outline .form-control~.form-notch .form-notch-trailing {\n    flex-grow: 1;\n    height: 100%;\n    border-left: none;\n    border-radius: 0 .65rem .65rem 0;\n    }\n\n    #chat1 .form-outline .form-control:focus~.form-notch .form-notch-leading {\n    border-top: 0.125rem solid #39c0ed;\n    border-bottom: 0.125rem solid #39c0ed;\n    border-left: 0.125rem solid #39c0ed;\n    }\n\n    #chat1 .form-outline .form-control:focus~.form-notch .form-notch-leading,\n    #chat1 .form-outline .form-control.active~.form-notch .form-notch-leading {\n    border-right: none;\n    transition: all 0.2s linear;\n    }\n\n    #chat1 .form-outline .form-control:focus~.form-notch .form-notch-middle {\n    border-bottom: 0.125rem solid;\n    border-color: #39c0ed;\n    }\n\n    #chat1 .form-outline .form-control:focus~.form-notch .form-notch-middle,\n    #chat1 .form-outline .form-control.active~.form-notch .form-notch-middle {\n    border-top: none;\n    border-right: none;\n    border-left: none;\n    transition: all 0.2s linear;\n    }\n\n    #chat1 .form-outline .form-control:focus~.form-notch .form-notch-trailing {\n    border-top: 0.125rem solid #39c0ed;\n    border-bottom: 0.125rem solid #39c0ed;\n    border-right: 0.125rem solid #39c0ed;\n    }","metadata":{"loc":{"lines":{"from":1,"to":70}}}}],["13",{"pageContent":"#chat1 .form-outline .form-control:focus~.form-notch .form-notch-trailing,\n    #chat1 .form-outline .form-control.active~.form-notch .form-notch-trailing {\n    border-left: none;\n    transition: all 0.2s linear;\n    }\n\n    #chat1 .form-outline .form-control:focus~.form-label {\n    color: #39c0ed;\n    }","metadata":{"loc":{"lines":{"from":72,"to":80}}}}],["14",{"pageContent":"#chat1 .form-outline .form-control:focus~.form-label {\n    color: #39c0ed;\n    }\n\n    #chat1 .form-outline .form-control~.form-label {\n    color: #bfbfbf;\n    }\n    `;\n    return (\n    <Container style={{ background: \"#eee\" }}>\n        <div class=\"container py-2\">\n        <div class=\"row d-flex justify-content-center\">\n            <div class=\"col-md-8 col-lg-6 col-xl-4\">\n            <div class=\"card\" id=\"chat1\" style={{ borderRadius: \"15px\" }}>\n                <div\n                class=\"card-header d-flex justify-content-between align-items-center p-3 bg-info text-white border-bottom-0\"\n                styled={{\n                    borderTopLeftRadius: \"15px\",\n                    borderTopRighRadius: \"15px\",\n                }}\n                >\n                <i class=\"fas fa-angle-left\"></i>\n                <p class=\"mb-0 fw-bold\">Live chat</p>\n                <i class=\"fas fa-times\"></i>\n                </div>\n                <div class=\"card-body\">\n                <div class=\"d-flex flex-row justify-content-start mb-4\">\n                    <img\n                    src=\"https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-chat/ava1-bg.webp\"\n                    alt=\"avatar 1\"\n                    style={{ width: \"45px\", height: \"100%\" }}\n                    />\n                    <div\n                    class=\"p-3 ms-3\"\n                    style={{\n                        borderRadius: \"15px\",\n                        background: \"rgba(57, 192, 237,.2)\",\n                    }}\n                    >\n                    <p class=\"small mb-0\">\n                        Hello and thank you for visiting MDBootstrap. Please click\n                        the video below.\n                    </p>\n                    </div>\n                </div>","metadata":{"loc":{"lines":{"from":78,"to":122}}}}],["15",{"pageContent":"<div class=\"d-flex flex-row justify-content-end mb-4\">\n                    <div\n                    class=\"p-3 me-3 border\"\n                    style={{ borderRadius: \"15px\", background: \"#fbfbfb\" }}\n                    >\n                    <p class=\"small mb-0\">\n                        Thank you, I really like your product.\n                    </p>\n                    </div>\n                    <img\n                    src=\"https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-chat/ava2-bg.webp\"\n                    alt=\"avatar 1\"\n                    style={{ width: \"45px\", height: \"100%\" }}\n                    />\n                </div>\n\n                <div class=\"d-flex flex-row justify-content-start mb-4\">\n                    <img\n                    src=\"https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-chat/ava1-bg.webp\"\n                    alt=\"avatar 1\"\n                    style={{ width: \"45px\", height: \"100%\" }}\n                    />\n                    <div class=\"ms-3\" style={{ borderRadius: \"15px\" }}>\n                    <div class=\"bg-image\">\n                        <img\n                        src=\"https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-chat/screenshot1.webp\"\n                        style={{ borderRadius: \"15px\" }}\n                        alt=\"video\"\n                        />\n                        <a href=\"#!\">\n                        <div class=\"mask\"></div>\n                        </a>\n                    </div>\n                    </div>\n                </div>","metadata":{"loc":{"lines":{"from":124,"to":158}}}}],["16",{"pageContent":"<div class=\"d-flex flex-row justify-content-start mb-4\">\n                    <img\n                    src=\"https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-chat/ava1-bg.webp\"\n                    alt=\"avatar 1\"\n                    style={{ width: \"45px\", height: \"100%\" }}\n                    />\n                    <div\n                    class=\"p-3 ms-3\"\n                    style={{\n                        borderRadius: \"15px\",\n                        background: \"rgba(57, 192, 237,.2)\",\n                    }}\n                    >\n                    <p class=\"small mb-0\">...</p>\n                    </div>\n                </div>\n\n                <div data-mdb-input-init class=\"form-outline\">\n                    <textarea\n                    class=\"form-control\"\n                    id=\"textAreaExample\"\n                    rows=\"4\"\n                    onChange={onChange}\n                    value={state.value}\n                    ></textarea>\n                    <label class=\"form-label\" for=\"textAreaExample\">\n                    Type your message\n                    </label>\n                </div>\n                </div>\n            </div>\n            </div>\n        </div>\n        </div>\n    </Container>\n    );","metadata":{"loc":{"lines":{"from":160,"to":195}}}}],["17",{"pageContent":"State.init({\n  email: \"\",\n  pass: \"\",\n  isCheck: false,\n});\nconst emailChange = (e) => {\n  State.update({\n    email: e.target.value,\n  });\n};\nconst passChange = (e) => {\n  State.update({\n    pass: e.target.value,\n  });\n};\nconst isCheck = () => {\n  State.update({\n    isCheck: !isCheck,\n  });\n};\nreturn (\n  <div>\n    <div class=\"mb-3\">\n      <label for=\"exampleInputEmail1\" class=\"form-label\">\n        Email address\n      </label>\n      <input\n        type=\"email\"\n        class=\"form-control\"\n        id=\"exampleInputEmail1\"\n        aria-describedby=\"emailHelp\"\n        onChange={emailChange}\n        value={state.email}\n      />\n      <div id=\"emailHelp\" class=\"form-text\">\n        We'll never share your email with anyone else.\n      </div>\n    </div>\n    <div class=\"mb-3\">\n      <label for=\"exampleInputPassword1\" class=\"form-label\">\n        Password\n      </label>\n      <input\n        type=\"password\"\n        onChange={passChange}\n        value={state.pass}\n        class=\"form-control\"\n        id=\"exampleInputPassword1\"\n      />\n    </div>\n    <div class=\"mb-3 form-check\">\n      <input\n        onChange={isCheck}\n        type=\"checkbox\"\n        class=\"form-check-input\"\n        id=\"exampleCheck1\"\n      />\n      <label class=\"form-check-label\" for=\"exampleCheck1\">\n        Check me out\n      </label>\n    </div>\n    <button type=\"submit\" class=\"btn btn-primary\">\n      Submit\n    </button>\n  </div>\n);","metadata":{"loc":{"lines":{"from":1,"to":66}}}}],["18",{"pageContent":"return (\n  <div class=\"row\">\n    <div class=\"col-lg-4 col-md-12 mb-4 mb-lg-0\">\n      <img\n        src=\"https://mdbcdn.b-cdn.net/img/Photos/Horizontal/Nature/4-col/img%20(73).webp\"\n        class=\"w-100 shadow-1-strong rounded mb-4\"\n        alt=\"Boat on Calm Water\"\n      />\n\n      <img\n        src=\"https://mdbcdn.b-cdn.net/img/Photos/Vertical/mountain1.webp\"\n        class=\"w-100 shadow-1-strong rounded mb-4\"\n        alt=\"Wintry Mountain Landscape\"\n      />\n    </div>\n\n    <div class=\"col-lg-4 mb-4 mb-lg-0\">\n      <img\n        src=\"https://mdbcdn.b-cdn.net/img/Photos/Vertical/mountain2.webp\"\n        class=\"w-100 shadow-1-strong rounded mb-4\"\n        alt=\"Mountains in the Clouds\"\n      />\n\n      <img\n        src=\"https://mdbcdn.b-cdn.net/img/Photos/Horizontal/Nature/4-col/img%20(73).webp\"\n        class=\"w-100 shadow-1-strong rounded mb-4\"\n        alt=\"Boat on Calm Water\"\n      />\n    </div>\n\n    <div class=\"col-lg-4 mb-4 mb-lg-0\">\n      <img\n        src=\"https://mdbcdn.b-cdn.net/img/Photos/Horizontal/Nature/4-col/img%20(18).webp\"\n        class=\"w-100 shadow-1-strong rounded mb-4\"\n        alt=\"Waves at Sea\"\n      />\n\n      <img\n        src=\"https://mdbcdn.b-cdn.net/img/Photos/Vertical/mountain3.webp\"\n        class=\"w-100 shadow-1-strong rounded mb-4\"\n        alt=\"Yosemite National Park\"\n      />\n    </div>\n  </div>\n);","metadata":{"loc":{"lines":{"from":1,"to":45}}}}],["19",{"pageContent":"const allRegistrations = Near.view(\n  \"lists.potlock.near\",\n  \"get_registrations_for_list\",\n  {\n    list_id: 1,\n  }\n);\nconst projects = useMemo(() => {\n  if (!isRegistryAdmin) {\n    return allRegistrations.filter(\n      (registration) => registration.status === \"Approved\"\n    );\n  }\n  allRegistrations.sort((a, b) => b.submitted_ms - a.submitted_ms);\n  return allRegistrations;\n}, allRegistrations);\nconst featuredProjectIds = [\n  \"magicbuild.near\",\n  \"potlock.near\",\n  \"yearofchef.near\",\n  \"publicgoodspodcast.near\",\n  \"near-india.near\",\n  \"onboarddao.sputnik-dao.near\",\n];\nconst featuredProjects = useMemo(\n  () =>\n    projects.filter((project) =>\n      featuredProjectIds.includes(project.registrant_id)\n    ),\n  projects\n);\n\nreturn (\n  <div class=\"row\">\n    <div class=\"col-lg-4 col-md-12 mb-4 mb-lg-0\">\n      {featuredProjects.map((dt, key) => {\n        const data = Social.getr(`${dt.registrant_id}/profile`);\n        console.log(data.backgroundImage.ipfs_cid);\n        return (\n          <img\n            src={`https://ipfs.near.social/ipfs/${data.backgroundImage.ipfs_cid}`}\n            class=\"w-100 shadow-1-strong rounded mb-4\"\n            alt=\"Boat on Calm Water\"\n          />\n        );\n      })}\n    </div>\n  </div>\n);","metadata":{"loc":{"lines":{"from":1,"to":49}}}}],["20",{"pageContent":"const url_ipfs = \"https://ipfs.near.social/ipfs\";\nState.init({\n  image1: `${url_ipfs}/bafybeifiokiandwndlllcuhmop6b73jjfyv3dyemirhsb5gfairkfostne`,\n  image2: `${url_ipfs}/bafybeicaxmzwvs7gkavzhdzrnh46wbyelanbe2ta5jn6fnsemo2wxn6com`,\n  image3: `${url_ipfs}/bafybeieubru2l2dndprxr6xbgc455bhxycfo5uimrg7xhnc6lxunmfyvoq`,\n  image4: `${url_ipfs}/bafkreiawagh7spkq334jdjbmyonbty3o7i2omeriw5gkeo25gaytnp7k2i`,\n  image5: `${url_ipfs}/bafkreiehyd7jeyvnd2fdivz7s5dxw3dtslcimbxpsqkrjizsoxejyrt474`,\n  image6: `${url_ipfs}/bafkreibxfndju3h4jdfmwzytv44vbj6xsqczsisorfu7t6wyq726ata7zi`,\n});\n\nreturn (\n  <div class=\"row\">\n    <div class=\"col-lg-4 col-md-12 mb-4 mb-lg-0\">\n      <img\n        src={state.image1}\n        class=\"w-100 shadow-1-strong rounded mb-4\"\n        alt=\"Boat on Calm Water\"\n      />\n\n      <img\n        src={state.image2}\n        class=\"w-100 shadow-1-strong rounded mb-4\"\n        alt=\"Wintry Mountain Landscape\"\n      />\n    </div>\n\n    <div class=\"col-lg-4 mb-4 mb-lg-0\">\n      <img\n        src={state.image3}\n        class=\"w-100 shadow-1-strong rounded mb-4\"\n        alt=\"Mountains in the Clouds\"\n      />\n\n      <img\n        src={state.image4}\n        class=\"w-100 shadow-1-strong rounded mb-4\"\n        alt=\"Boat on Calm Water\"\n      />\n    </div>\n\n    <div class=\"col-lg-4 mb-4 mb-lg-0\">\n      <img\n        src={state.image5}\n        class=\"w-100 shadow-1-strong rounded mb-4\"\n        alt=\"Waves at Sea\"\n      />\n\n      <img\n        src={state.image6}\n        class=\"w-100 shadow-1-strong rounded mb-4\"\n        alt=\"Yosemite National Park\"\n      />\n    </div>\n  </div>\n);","metadata":{"loc":{"lines":{"from":1,"to":55}}}}],["21",{"pageContent":"State.init({ value: \"\" });\nconst onChange = (e) => {\n  State.update({ value: e.target.value });\n};\nreturn (\n  <input\n    type=\"text\"\n    onChange={onChange}\n    value={state.value}\n    class=\"form-control\"\n    placeholder=\"Enter text\"\n    aria-label=\"text\"\n  />\n);","metadata":{"loc":{"lines":{"from":1,"to":14}}}}],["22",{"pageContent":"return (\n    <div class=\"jumbotron\">\n      <h1 class=\"display-4\">Hello, world!</h1>\n      <p class=\"lead\">\n        This is a simple hero unit, a simple jumbotron-style component for calling\n        extra attention to featured content or information.\n      </p>\n      <hr class=\"my-4\" />\n      <p>\n        It uses utility classes for typography and spacing to space content out\n        within the larger container.\n      </p>\n      <p class=\"lead\">\n        <a class=\"btn btn-primary btn-lg\" href=\"#\" role=\"button\">\n          Learn more\n        </a>\n      </p>\n    </div>\n);","metadata":{"loc":{"lines":{"from":1,"to":19}}}}],["23",{"pageContent":"return (\n    <ul class=\"list-group\">\n      <li class=\"list-group-item\">An item</li>\n      <li class=\"list-group-item\">A second item</li>\n      <li class=\"list-group-item\">A third item</li>\n      <li class=\"list-group-item\">A fourth item</li>\n      <li class=\"list-group-item\">And a fifth one</li>\n    </ul>\n  );","metadata":{"loc":{"lines":{"from":1,"to":9}}}}],["24",{"pageContent":"const Menu = styled.div`\n    \n.navbar .megamenu{ padding: 1rem; }\n\n@media all and (min-width: 992px) {\n\n  .navbar .has-megamenu{position:static!important;}\n  .navbar .megamenu{left:0; right:0; width:100%; margin-top:0;  }\n\n}\t\n\n@media(max-width: 991px){\n  .navbar.fixed-top .navbar-collapse, .navbar.sticky-top .navbar-collapse{\n    overflow-y: auto;\n      max-height: 90vh;\n      margin-top:10px;\n  }\n}\n`;","metadata":{"loc":{"lines":{"from":1,"to":19}}}}],["25",{"pageContent":"return (\n  <Menu class=\"navbar navbar-expand-lg navbar-dark bg-primary\">\n    <div class=\"container-fluid\">\n      <button\n        class=\"navbar-toggler\"\n        type=\"button\"\n        data-bs-toggle=\"collapse\"\n        data-bs-target=\"#main_nav\"\n      >\n        <span>Mega Menu</span>\n      </button>\n      <div class=\"collapse navbar-collapse\" id=\"main_nav\">\n        <ul class=\"navbar-nav\">\n          <li class=\"nav-item active\">\n            {\" \"}\n            <a class=\"nav-link\" href=\"#\">\n              Home{\" \"}\n            </a>{\" \"}\n          </li>\n          <li class=\"nav-item\">\n            <a class=\"nav-link\" href=\"#\">\n              {\" \"}\n              About{\" \"}\n            </a>\n          </li>\n          <li class=\"nav-item\">\n            <a class=\"nav-link\" href=\"#\">\n              {\" \"}\n              Services{\" \"}\n            </a>\n          </li>\n          <li class=\"nav-item dropdown has-megamenu\">\n            <a\n              class=\"nav-link dropdown-toggle\"\n              href=\"#\"\n              data-bs-toggle=\"dropdown\"\n            >\n              {\" \"}\n              Mega menu{\" \"}\n            </a>\n            <div class=\"dropdown-menu megamenu\" role=\"menu\">\n              This is content of megamenu. <br />\n              Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\n              eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut\n              enim ad minim veniam, quis nostrud exercitation ullamco laboris\n              nisi ut aliquip ex ea commodo consequat.\n            </div>\n          </li>\n        </ul>\n        <ul class=\"navbar-nav ms-auto\">\n          <li class=\"nav-item\">\n            <a class=\"nav-link\" href=\"#\">\n              {\" \"}\n              Menu item{\" \"}\n            </a>\n          </li>\n          <li class=\"nav-item dropdown\">\n            <a\n              class=\"nav-link  dropdown-toggle\"\n              href=\"#\"\n              data-bs-toggle=\"dropdown\"\n            >\n              {\" \"}\n              Dropdown right{\" \"}","metadata":{"loc":{"lines":{"from":21,"to":84}}}}],["26",{"pageContent":"<a\n              class=\"nav-link  dropdown-toggle\"\n              href=\"#\"\n              data-bs-toggle=\"dropdown\"\n            >\n              {\" \"}\n              Dropdown right{\" \"}\n            </a>\n            <ul class=\"dropdown-menu dropdown-menu-end\">\n              <li>\n                <a class=\"dropdown-item\" href=\"#\">\n                  {\" \"}\n                  Submenu item 1\n                </a>\n              </li>\n              <li>\n                <a class=\"dropdown-item\" href=\"#\">\n                  {\" \"}\n                  Submenu item 2{\" \"}\n                </a>\n              </li>\n            </ul>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </Menu>\n);","metadata":{"loc":{"lines":{"from":78,"to":105}}}}],["27",{"pageContent":"return (\n    <>\n      <div\n        class=\"modal fade\"\n        id=\"exampleModal\"\n        tabindex=\"-1\"\n        aria-labelledby=\"exampleModalLabel\"\n        aria-hidden=\"true\"\n      >\n        <div class=\"modal-dialog\">\n          <div class=\"modal-content\">\n            <div class=\"modal-header\">\n              <h1 class=\"modal-title fs-5\" id=\"exampleModalLabel\">\n                Modal title\n              </h1>\n              <button\n                type=\"button\"\n                class=\"btn-close\"\n                data-bs-dismiss=\"modal\"\n                aria-label=\"Close\"\n              ></button>\n            </div>\n            <div class=\"modal-body\">...</div>\n            <div class=\"modal-footer\">\n              <button\n                type=\"button\"\n                class=\"btn btn-secondary\"\n                data-bs-dismiss=\"modal\"\n              >\n                Close\n              </button>\n              <button type=\"button\" class=\"btn btn-primary\">\n                Save changes\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );","metadata":{"loc":{"lines":{"from":1,"to":40}}}}],["28",{"pageContent":"return (\n  <div aria-label=\"Page navigation example\">\n    <ul class=\"pagination\">\n      <li class=\"page-item\">\n        <a class=\"page-link\" href=\"#\">\n          Previous\n        </a>\n      </li>\n      <li class=\"page-item active\">\n        <a class=\"page-link\" href=\"#\">\n          1\n        </a>\n      </li>\n      <li class=\"page-item\">\n        <a class=\"page-link\" href=\"#\">\n          2\n        </a>\n      </li>\n      <li class=\"page-item\">\n        <a class=\"page-link\" href=\"#\">\n          3\n        </a>\n      </li>\n      <li class=\"page-item\">\n        <a class=\"page-link\" href=\"#\">\n          Next\n        </a>\n      </li>\n    </ul>\n  </div>\n);","metadata":{"loc":{"lines":{"from":1,"to":31}}}}],["29",{"pageContent":"State.init({\n  progress: props.progress || \"50%\",\n});\nreturn (\n  <>\n    <div\n      class=\"progress mt-2\"\n      role=\"progressbar\"\n      aria-label=\"Basic example\"\n      aria-valuenow=\"0\"\n      aria-valuemin=\"0\"\n      aria-valuemax=\"100\"\n    >\n      <div class=\"progress-bar\" style={{ width: state.progress }}></div>\n    </div>\n  </>\n);","metadata":{"loc":{"lines":{"from":1,"to":17}}}}],["30",{"pageContent":"return (\n  <div id=\"rating1\" class=\"star-rating\" role=\"rating\" data-rating=\"3\">\n    <span class=\"star\" data-value=\"1\">\n      &#9733;\n    </span>\n    <span class=\"star\" data-value=\"2\">\n      &#9733;\n    </span>\n    <span class=\"star\" data-value=\"3\">\n      &#9733;\n    </span>\n    <span class=\"star\" data-value=\"4\">\n      &#9733;\n    </span>\n    <span class=\"star\" data-value=\"5\">\n      &#9733;\n    </span>\n  </div>\n);","metadata":{"loc":{"lines":{"from":1,"to":19}}}}],["31",{"pageContent":"const style = {\n    padding: \"1rem 2rem\",\n    borderRadius: \"8px\",\n    backgroundColor: \"#e74c3c\",\n    color: \"#fff\",\n    fontSize: \"1.2rem\",\n    border: \"none\",\n    cursor: \"pointer\"\n  };\n  \n  return (\n    <>\n      <button style={style}>Click Me!</button>\n    </>\n  );","metadata":{"loc":{"lines":{"from":1,"to":15}}}}],["32",{"pageContent":"const onClick = () => { };\nretun(<button onClick={onClick} type=\"button\" class=\"btn btn-primary\" >Click Me</button>)","metadata":{"loc":{"lines":{"from":1,"to":2}}}}],["33",{"pageContent":"const contract = \"hello.near-examples.near\";\nconst greeting = Near.view(contract, \"get_greeting\", {});\n\n// intergrati\nconst greetingForm = (\n  <>\n    <div className=\"border border-black p-3\">\n      <label>Update greeting</label>\n      <input placeholder=\"Howdy\" onChange={onInputChange} />\n      <button className=\"btn btn-primary mt-2\" onClick={onBtnClick}>\n        Save\n      </button>\n    </div>\n  </>\n);\n\nconst notLoggedInWarning = <p> Login to change the greeting </p>;\n\n// Render\nreturn (\n  <>\n    <div className=\"container border border-info p-3\">\n      <h3 className=\"text-center\">\n        The contract says:\n        <span className=\"text-decoration-underline\"> {greeting} </span>\n      </h3>\n\n      <p className=\"text-center py-2\">\n        Look at that! A greeting stored on the NEAR blockchain.\n      </p>\n\n      {context.accountId ? greetingForm : notLoggedInWarning}\n    </div>\n  </>\n);","metadata":{"loc":{"lines":{"from":1,"to":35}}}}],["34",{"pageContent":"return (\n  <img\n    src=\"https://ipfs.io/ipfs/QmabYudwPtdSy1JnvnVMfuiu9pNfGnxMhN2obbPmSDx65Z/0187.png\"\n    class=\"\"\n    alt=\"mint.yearofchef.near\"\n  />\n);","metadata":{"loc":{"lines":{"from":1,"to":7}}}}],["35",{"pageContent":"State.init({\n  img: null,\n});\nreturn (\n  <div className='container row'>\n    <div>\n      Image upload: <br />\n      <IpfsImageUpload image={state.img} />\n    </div>\n    <div>\n      Raw State:\n      <pre>{JSON.stringify(state)}</pre>\n    </div>\n    <div className='mt-2'>\n      {state.img.cid && (\n        <img\n          src={`https://ipfs.near.social/ipfs/${state.img.cid}`}\n          alt='uploaded'\n        />\n      )}\n    </div>\n  </div>\n);","metadata":{"loc":{"lines":{"from":1,"to":23}}}}],["36",{"pageContent":"// Show balance Near\nconst res = fetch(`https://api.nearblocks.io/v1/account/${props.wallet_id || context.accountId}`);\n\nif (!(res && res.body)) return \"...\";\n\nconst native_balance = res.body.account[0].amount / 1e24;\nconst unspendable_balance = 0.05 + res.body.account[0].storage_usage / 1e5;\nconst spendable_balance = native_balance - unspendable_balance;\n\nconst balance =\n  props.balance_type === \"spendable\" ? spendable_balance : native_balance;\n\nreturn balance.toFixed(props.decimal_places ?? 2);","metadata":{"loc":{"lines":{"from":1,"to":13}}}}],["37",{"pageContent":"const [a, setA] = useState(() => {\n    console.log(\"Init 'a'\");\n    return \"Y\";\n  });\n  \n  const [b, setB] = useState(\"B\");\n  const [sum, setSum] = useState(0);\n  \n  useEffect(() => {\n    setSum(a.length + b.length);\n    return () => {\n      console.log(\"cleanup\");\n    };\n  }, [a, b]);\n  \n  return (\n    <div>\n      A = {a}\n      <br />B = {b}\n      <br />\n      Length sum = {sum}\n      <div>\n        <button onClick={() => setA((s) => s + \"O\")}>A</button>\n        <button onClick={() => setB(b + \"O\")}>B</button>\n      </div>\n    </div>\n  );","metadata":{"loc":{"lines":{"from":1,"to":27}}}}],["38",{"pageContent":"//check nft suplly \nconst contractID = \"og-sbt.i-am-human.near\"; // for nft contract\n\nState.init({\n  contract: contractID,\n});\nconst onChangeContract = (contract) => {\n  State.update({\n    contract,\n  });\n};\nconst humans = Near.view(state.contract, \"nft_total_supply\"); // checks total minted // total non expired supply\n\nreturn (\n  <div>\n    <div>\n      <h1>Number of NFTs: {humans}</h1>\n    </div>\n    <div className=\"row\">\n      <div className=\" col-lg-12 mb-2\">\n        Contract ID: (Checks NFT Supply)\n        <input\n          type=\"text\"\n          placeholder={state.contract}\n          onChange={(e) => onChangeContract(e.target.value)}\n        />\n      </div>\n    </div>\n  </div>\n);","metadata":{"loc":{"lines":{"from":1,"to":30}}}}],["39",{"pageContent":"// An examle func conpoment\nfunction Magic(props) {\n    return <div>Magic: {props.children}</div>;\n}\n\nreturn <Magic>Hello World</Magic>;","metadata":{"loc":{"lines":{"from":1,"to":6}}}}],["40",{"pageContent":"let accountId = context.accountId;\n/**\n * Mint NFT Form\n */\nif (!accountId) {\n    return \"Please sign in with NEAR wallet\";\n}\nlet cid =\n    props.cid ?? \"bafkreibmc23xhip63mxv2mulb7xko5htpiqszrch4fo3optszuctjtlrau\";\nlet image = props.image;\nconst mintButton = props.mintButton ?? \"Mint\";\nconst showDetails = props.showDetails ?? true;\nconst title = props.title ?? \"Example title\";\nconst receiver = props.receiver ?? \"ogruss.near\";\n\nif (image) {\n    cid = image.cid;\n    console.log(\"Image CID: \" + cid);\n}\n\nlet description = props.description ?? \"Proof of Vibes powered by GenaDrop\";\nconst profile = socialGetr(`${accountId}/profile`);\n\nif (profile === null) {\n    IpfsImageUpload();\n    return \"Loading\";\n}\nState.init({\n    cid: cid,\n    description: description,\n    title: title,\n    image: image,\n    receiver: receiver,\n    //   image: \"\",\n});","metadata":{"loc":{"lines":{"from":1,"to":35}}}}],["41",{"pageContent":"const handleMint = () => {\n    if (!state.image.cid) {\n        return;\n    }\n    if (!accountId) {\n        console.log(\"Please login\"); // add share dogvwallet\n        State.update({\n            showAlert: true,\n            toastMessage: \"Please log in before continuing\",\n        });\n        setTimeout(() => {\n            State.update({\n                showAlert: false,\n            });\n        }, 3000);\n    } else if (!state.title) {\n        console.log(\"Please Enter title\");\n        State.update({\n            showAlert: true,\n            toastMessage: \"Please enter a title for the NFT\",\n        });","metadata":{"loc":{"lines":{"from":37,"to":57}}}}],["42",{"pageContent":"setTimeout(() => {\n            State.update({\n                showAlert: false,\n            });\n        }, 3000);\n    } else if (!state.description) {\n        State.update({\n            showAlert: true,\n            toastMessage: \"Please enter a description for the NFT\",\n        });\n        setTimeout(() => {\n            State.update({\n                showAlert: false,\n            });\n        }, 3000);\n    } else {\n        const metadata = {\n            name: state.title,\n            description: state.description,\n            properties: [],\n            image: `ipfs://${state.image.cid}`,\n        };\n        console.log(\"come\", metadata);\n        asyncFetch(\"https://ipfs.near.social/add\", {\n            method: \"POST\",\n            headers: {\n                Accept: \"application/json\",\n            },\n            body: metadata,\n        }).then((res) => {\n            console.log(\"GO ON SOUN\", res);\n            const cid = res.body.cid;\n            const gas = 200000000000000;\n            const deposit = 10000000000000000000000;\n            console.log(\"State Image CID: \" + state.image.cid);\n            console.log(\"Reference CID: \" + cid);\n            Near.call([\n                {\n                    contractName: \"nft.genadrop.near\",\n                    methodName: \"nft_mint\",\n                    args: {\n                        token_id: `${Date.now()}`,\n                        metadata: {\n                            title: state.title,\n                            description: state.description,\n                            media: `https://ipfs.io/ipfs/${state.image.cid}`,\n                            reference: `ipfs://${cid}`,\n                        },\n                        receiver_id: state.receiver,\n                    },\n                    gas: gas,\n                    deposit: deposit,\n                },\n            ]);\n        });\n    }\n};\n\ninitState({\n    title: \"\",\n    description: \"\",\n    showAlert: false,\n    toastMessage: \"\",\n});","metadata":{"loc":{"lines":{"from":59,"to":122}}}}],["43",{"pageContent":"const onChangeTitle = (title) => {\n    State.update({\n        title,\n    });\n};\nconst onChangeReceiver = (receiver) => {\n    State.update({\n        receiver,\n    });\n};\n\nconst onChangeDesc = (description) => {\n    State.update({\n        description,\n    });\n};\n\nif (!accountId) {\n    console.log(\"Please login\");\n    State.update({\n        showAlert: true,\n        toastMessage: \"Please log in before continuing\",\n    });\n}\n\nconst ImageUploadCard = styled.div`\ndisplay:flex;\nflex-flow: column nowrap;\nalign-items: center;\n  width:80%;\n  border: 2px dashed #0d99ff;\n  border-radius: 1rem;\n  box-shadow: 4px 4px 20px 6px rgba(0,0,0,.2);\n  margin:30px auto;\n  padding:1.5rem;\n  text-align: center;\n`;\nconst Main = styled.div`\nposition:relative;\n  font-family: \"SF Pro Display\",sans-serif;\n`;\n\nconst Heading = styled.p`\n  margin: 10px auto 10px auto;\n  font-size: 1em;\n  color:#0f1d40;\n  width:60%;\n  text-align: center;\n  font-family: \"SF Pro Display\",sans-serif;\n`;\n\nconst Toast = styled.div`\n  position: absolute;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  align-conten: center;\n  bottom: 60px;\n  right: 20px;\n  background-color: red;\n  color: #fff;\n  padding: 16px;\n  border-radius: 8px;\n  z-index: 100;\n  box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);\n  line-height:1;\n`;\n\nconst Elipse = styled.div`\nbackground-color:#eff3f9;\nheight: 100px;\nwidth: 100px;\nborder-radius: 50%;\n`;\n\nconst Text = styled.p`\nfont-size: .9rem;\ncolor: #525c76;\nline-height:1.rem;\nmargin: 3px;\n`;\n\nconst Card = styled.div`\npadding: 1em;\nborder: 1px solid #e5e8eb;\ngap: 2em;\nmargin: 10px auto;\nborder-radius: .7em;\n`;\n\nconst ImageCard = styled.div`\n  box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);\n  height:fit-content;\n  max-height:500px;\n  width: 90%;\n  max-width: 500px;\n  border-radius: 1rem;\n  &>img{\n  object-fit: contain;\n  }\n`;","metadata":{"loc":{"lines":{"from":124,"to":224}}}}],["44",{"pageContent":"const Input = styled.input`\n  display: block;\n  padding:.5em;\n  width:100%;\n  border: 1px solid #e5e8eb;\n  border-radius: 10px;\n  outline: none;\n  background: #f4f5f6;\n  color: #525c76;\n  :focus{\n    border:1px solid #0d99ff;\n  }\n  ::placeholder {\n    color: palevioletred;\n  }\n`;","metadata":{"loc":{"lines":{"from":226,"to":241}}}}],["45",{"pageContent":"const TextArea = styled.textarea`\n  display: block;\n  padding:.5em;\n  width:100%;\n  border: 1px solid #e5e8eb;\n  border-radius: 10px;\n  outline: none;\n  background: #f4f5f6;\n  color: #525c76;\n  :focus{\n    border:1px solid #0d99ff;\n  }\n`;","metadata":{"loc":{"lines":{"from":243,"to":255}}}}],["46",{"pageContent":"return (\n    <Main className=\"container-fluid\">\n        <div>\n            <Card className=\"d-flex flex-column align-items-center\">\n                {!!state.image.cid ?? (\n                    <ImageCard>\n                        <img\n                            src={`https://ipfs.io/ipfs/` + state.image.cid}\n                            alt=\"uploaded image\"\n                            width=\"100%\"\n                            height=\"100%\"\n                            className=\"rounded-3\"\n                        />\n                    </ImageCard>\n                )}\n                <div>\n                    <IpfsImageUpload\n                        image={state.image}\n                        className=\"btn btn-outline-primary border-0 rounded-3\"\n                    />\n                </div>\n            </Card>\n            {showDetails && (\n                <Card>\n                    <h5>NFT Details</h5>\n                    <Card>\n                        Title:\n                        <Input\n                            type=\"text\"\n                            onChange={(e) => onChangeTitle(e.target.value)}\n                            placeholder={state.title}\n                        />\n                    </Card>\n                    <Card>\n                        Description:\n                        <TextArea\n                            type=\"text\"\n                            onChange={(e) => onChangeDesc(e.target.value)}\n                            placeholder={state.description}\n                        />\n                    </Card>\n                    <Card>\n                        Receiver:\n                        <Input\n                            type=\"text\"\n                            onChange={(e) => onChangeReceiver(e.target.value)}\n                            placeholder={state.receiver}\n                        />\n                    </Card>\n                </Card>\n            )}\n            <div className=\"d-flex justify-content-center mb-2\">","metadata":{"loc":{"lines":{"from":257,"to":308}}}}],["47",{"pageContent":"/>\n                    </Card>\n                </Card>\n            )}\n            <div className=\"d-flex justify-content-center mb-2\">\n                <button type=\"button\" className=\"btn btn-primary\" onClick={handleMint}>\n                    {mintButton}\n                </button>\n            </div>\n        </div>\n    </Main>\n)","metadata":{"loc":{"lines":{"from":304,"to":315}}}}],["48",{"pageContent":"// Stake Form\ninitState({ amount: \"1\", poolId: \"zavodil.poolv1.near\" });\n\nconst onStakeClick = () => {\n  const gas = 300 * 1000000000000;\n  // TODO: doesn't support floats right now due to limitation of JS integers\n  const deposit = parseInt(state.amount) + \"000000000000000000000000\";\n  console.log(gas, deposit);\n  Near.call(state.poolId, \"deposit_and_stake\", {}, gas, deposit);\n};\n\nreturn (\n  <div>\n    <h1>Stake NEAR</h1>\n    <p>\n      Pool: <input value={state.poolId} />\n    </p>\n    <p>\n      Amount: <input type=\"number\" value={state.amount} />\n    </p>\n    <a onClick={onStakeClick}>Stake</a>\n  </div>\n);","metadata":{"loc":{"lines":{"from":1,"to":23}}}}],["49",{"pageContent":"// upload ipfs and store Data to socialDB\nState.init({\n    loading: false,\n  });\n  \n  const ipfsUrl = (cid) => `https://ipfs.near.social/ipfs/${cid}`;\n  \n  const filesOnChange = (files) => {\n    if (files?.length > 0) {\n      State.update({\n        loading: true,\n      });\n      const body = files[0];\n      asyncFetch(\"https://ipfs.near.social/add\", {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n        },\n        body,\n      })\n        .then((res) => {\n          const content = {\n            type: \"md\",\n            image: { ipfs_cid: res.body.cid },\n          };\n          const data = {\n            post: {\n              main: JSON.stringify(content),\n            },\n            index: {\n              post: JSON.stringify([\n                {\n                  key: \"insta\",\n                  value: {\n                    type: \"md\",\n                  },\n                },\n                {\n                  key: \"main\",\n                  value: {\n                    type: \"md\",\n                  },\n                },\n              ]),\n            },\n          };\n          State.update({\n            uploaded: true,\n          });\n          Social.set(data, {\n            force: true,\n            onCommit: () => {\n              setTimeout(() => {\n                State.update({\n                  uploaded: false,\n                });\n              }, 3500);\n            },\n          });\n        })\n        .finally(() => {\n          State.update({\n            loading: false,\n          });\n        });\n    } else {\n      State.update({\n        img: null,\n      });\n    }\n  };\n  \n  const Wrapper = styled.div`\n    @media (min-width: 576px) {\n      max-width: 288px;\n    }\n    background: RGBA(248,249,250);\n    \n    > div {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n    }\n  \n    &:hover {\n      background: RGBA(230, 230, 230);\n    }\n  \n    transition: background 0.5s;\n  `;\n  \n  const loader = (\n    <span","metadata":{"loc":{"lines":{"from":1,"to":93}}}}],["50",{"pageContent":"justify-content: center;\n      align-items: center;\n    }\n  \n    &:hover {\n      background: RGBA(230, 230, 230);\n    }\n  \n    transition: background 0.5s;\n  `;\n  \n  const loader = (\n    <span\n      className=\"spinner-grow spinner-grow-sm me-1\"\n      role=\"status\"\n      aria-hidden=\"true\"\n    />\n  );\n  \n  return (\n    <Wrapper className=\"ratio ratio-1x1\">\n      <Files\n        multiple={false}\n        accepts={[\"image/*\"]}\n        minFileSize={1}\n        clickable\n        onChange={filesOnChange}\n        className=\"btn\"\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"80%\"\n          height=\"80%\"\n          viewBox=\"0 0 16 16\"\n          className=\"position-absolute top-50 start-50 translate-middle\"\n          style={{ opacity: 0.05 }}\n        >\n          <path d=\"M10.5 8.5a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0z\" />\n          <path d=\"M2 4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2h-1.172a2 2 0 0 1-1.414-.586l-.828-.828A2 2 0 0 0 9.172 2H6.828a2 2 0 0 0-1.414.586l-.828.828A2 2 0 0 1 3.172 4H2zm.5 2a.5.5 0 1 1 0-1 .5.5 0 0 1 0 1zm9 2.5a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0z\" />\n        </svg>\n        {state.uploaded ? (\n          <div>\n            {loader}\n            Posting\n          </div>\n        ) : state.loading ? (\n          <div>{loader} Uploading</div>\n        ) : (\n          <div>Upload a photo</div>\n        )}\n      </Files>\n    </Wrapper>\n  );","metadata":{"loc":{"lines":{"from":81,"to":133}}}}],["51",{"pageContent":"return (\n            <div class=\"card\" style={{ width: 300 }}>\n              <img\n                src=\"https://ipfs.io/ipfs/QmabYudwPtdSy1JnvnVMfuiu9pNfGnxMhN2obbPmSDx65Z/0187.png\"\n                class=\"\"\n                alt=\"mint.yearofchef.near\"\n              />\n              <div class=\"card-body\">\n                <h5 class=\"card-title\">Card title</h5>\n                <p class=\"card-text\">\n                  In a PotLuck, everyone brings a dish to the table, so everyone is a chef. As a we build the Open Web and the Dragon Stack, it is you that brings that extra fire to every dish. This is why 2024 is the YEAR OF THE CHEF. By trading this you automatically support public goods!\n                </p>\n              </div>\n            </div>\n          );\n          ","metadata":{"source":"mint.yearofchef.near","blockchain":"mainnet","tokenId":"187"}}],["52",{"pageContent":"return (\n            <div class=\"card\" style={{ width: 300 }}>\n              <img\n                src=\"https://ipfs.io/ipfs/QmabYudwPtdSy1JnvnVMfuiu9pNfGnxMhN2obbPmSDx65Z/0082.png\"\n                class=\"\"\n                alt=\"mint.yearofchef.near\"\n              />\n              <div class=\"card-body\">\n                <h5 class=\"card-title\">Card title</h5>\n                <p class=\"card-text\">\n                  In a PotLuck, everyone brings a dish to the table, so everyone is a chef. As a we build the Open Web and the Dragon Stack, it is you that brings that extra fire to every dish. This is why 2024 is the YEAR OF THE CHEF. By trading this you automatically support public goods!\n                </p>\n              </div>\n            </div>\n          );\n          ","metadata":{"source":"mint.yearofchef.near","blockchain":"mainnet","tokenId":"82"}}],["53",{"pageContent":"return (\n            <div class=\"card\" style={{ width: 300 }}>\n              <img\n                src=\"https://ipfs.io/ipfs/QmabYudwPtdSy1JnvnVMfuiu9pNfGnxMhN2obbPmSDx65Z/0026.png\"\n                class=\"\"\n                alt=\"mint.yearofchef.near\"\n              />\n              <div class=\"card-body\">\n                <h5 class=\"card-title\">Card title</h5>\n                <p class=\"card-text\">\n                  In a PotLuck, everyone brings a dish to the table, so everyone is a chef. As a we build the Open Web and the Dragon Stack, it is you that brings that extra fire to every dish. This is why 2024 is the YEAR OF THE CHEF. By trading this you automatically support public goods!\n                </p>\n              </div>\n            </div>\n          );\n          ","metadata":{"source":"mint.yearofchef.near","blockchain":"mainnet","tokenId":"26"}}],["54",{"pageContent":"return (\n            <div class=\"card\" style={{ width: 300 }}>\n              <img\n                src=\"https://ipfs.io/ipfs/QmabYudwPtdSy1JnvnVMfuiu9pNfGnxMhN2obbPmSDx65Z/1917.png\"\n                class=\"\"\n                alt=\"mint.yearofchef.near\"\n              />\n              <div class=\"card-body\">\n                <h5 class=\"card-title\">Card title</h5>\n                <p class=\"card-text\">\n                  In a PotLuck, everyone brings a dish to the table, so everyone is a chef. As a we build the Open Web and the Dragon Stack, it is you that brings that extra fire to every dish. This is why 2024 is the YEAR OF THE CHEF. By trading this you automatically support public goods!\n                </p>\n              </div>\n            </div>\n          );\n          ","metadata":{"source":"mint.yearofchef.near","blockchain":"mainnet","tokenId":"1917"}}],["55",{"pageContent":"---\nid: overview\ntitle: Overview\n---\n\nNEAR simplifies building, deploying and accessing decentralized frontends. Embrace the power of community and Web 3.\n\n![bos](/docs/bos-landing.png)\n\n---","metadata":{"loc":{"lines":{"from":1,"to":10}}}}],["56",{"pageContent":"## Why Using NEAR Tech Stack?\n\nNEAR is more than just a blockchain, it is also a development environment and a platform in which to deploy and discover new applications. NEAR simplifies building Web 3 applications providing easy onboarding, high security and a seamless interaction with all chains.\n\n#### Access \nWith NEAR, users always have the ability to locally run blockchain applications which helps assure robustness and censorship-resistance, while maintaining a user-friendly experience.","metadata":{"loc":{"lines":{"from":12,"to":17}}}}],["57",{"pageContent":"#### Security\nThe code for Components is always on-chain, making it auditable and viewable in explorers. This enhances security, and users can locally run the full stack with confidence. \n\n#### Composability\nNEAR fosters composability by enabling developers to reuse and remix Components. Building with NEAR is extremely lightweight and easy, with the ability to deploy new front-ends for smart contracts on mainnet in less than 10 minutes.","metadata":{"loc":{"lines":{"from":19,"to":23}}}}],["58",{"pageContent":"#### Chain Agnostic Components\nAdditionally, NEAR Components are chain-agnostic, making it a flexible solution for developers working with different blockchains.\n\n---","metadata":{"loc":{"lines":{"from":25,"to":28}}}}],["59",{"pageContent":"## The Pillars of NEAR Stack\n\nThe NEAR stack is based on three pillars: \n- Components: Composable frontends that solve specific problems.\n- [Blockchains](#blockchains): To store the component's code, as well as their assets and data.\n- [Gateways](#gateways): A simple way to render components anywhere.\n\n<hr className=\"subsection\" />","metadata":{"loc":{"lines":{"from":30,"to":37}}}}],["60",{"pageContent":"### Components\n\nComponents are small web 3 applications (think [Lido](tutorial/hello-lido.md), Uniswap, Aave) that are stored **entirely on-chain**.\n\nDevelopers can fork these apps and compose them to create full web applications.\n\n<hr className=\"subsection\" />","metadata":{"loc":{"lines":{"from":39,"to":45}}}}],["61",{"pageContent":"### Blockchains\n\nComponents can call functions on any blockchain, with current support for all EVM chains (e.g. Polygon, zkSync) and NEAR.\n\nThe source code for the apps is on NEAR, due to it's ability to very cheaply store HTML/CSS/JS (a few cents).\n\n<hr className=\"subsection\" />","metadata":{"loc":{"lines":{"from":47,"to":53}}}}],["62",{"pageContent":"### Gateways\n\nGateways make locally-run, decentralized front-ends available to the masses. A gateway consists of a specially designed virtual machine that loads and runs frontends for protocols built on Ethereum, L2s, and other Layer 1s like NEAR. The code for these frontends is stored on the NEAR blockchain.","metadata":{"loc":{"lines":{"from":55,"to":57}}}}],["63",{"pageContent":"Examples of gateways include [near.org](https://near.org), [bos.gg](https://bos.gg), [near.social](https://near.social), [Cantopia](https://cantopia.pages.dev), and [nearpad.dev](https://nearpad.dev).","metadata":{"loc":{"lines":{"from":59,"to":59}}}}],["64",{"pageContent":"---\nid: quickstart\ntitle: What are NEAR Components?\nsidebar_label: What is a Component?\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport {WidgetEditor} from \"@site/src/components/widget-editor\"\n\nNEAR Components are a new way to build web applications. They are composable, reusable and decentralized.\n\n![img](/docs/assets/welcome-pages/bos-landing.png)\n\n:::tip\nYou can login to interact with the examples in this section.\n:::\n\n---","metadata":{"loc":{"lines":{"from":1,"to":19}}}}],["65",{"pageContent":"## Familiar to Web Developers\nNEAR Components are built on top of [React Components](https://react.dev/), meaning that they:\n- Handle input through the `props` variable\n- Handle state through the [`useState`](https://react.dev/reference/react/useState) hook\n- Handle side effects through the [`useEffect`](https://react.dev/reference/react/useEffect) hook\n\n<WidgetEditor id=\"1\">\n\n```jsx\nconst name = props.name || \"Maria\";\nconst [count, setCount] = useState(1);","metadata":{"loc":{"lines":{"from":21,"to":31}}}}],["66",{"pageContent":"return (\n  <div>\n    <p> {count} cheers for {name}! </p>\n    <button onClick={() => setCount(count + 1)}>Cheers!</button>\n  </div>\n);","metadata":{"loc":{"lines":{"from":33,"to":38}}}}],["67",{"pageContent":"```\n\n</WidgetEditor>\n\nIn contrast with React, NEAR Components are not wrapped in a `function` or `class` definition.\n\nIndeed, when writing a NEAR Component, you focus on writing the body of the component, which is a function that returns the JSX to be rendered. \n\n---","metadata":{"loc":{"lines":{"from":39,"to":47}}}}],["68",{"pageContent":"## NEAR Native\nNEAR Components can readily [interact with smart contracts](../api/near.md) in the NEAR Blockchain. While `view` methods are free to query by anyone, `call` methods require the user to be logged in.\n\n<WidgetEditor id=\"2\">\n\n```jsx\nconst counter = Near.view('counter.near-examples.testnet', 'get_num')\n\nif(counter === null) return 'Loading...'\n\nconst add = () => {\n  Near.call('counter.near-examples.testnet', 'increment')\n}","metadata":{"loc":{"lines":{"from":49,"to":61}}}}],["69",{"pageContent":"const subtract = () => {\n  Near.call('counter.near-examples.testnet', 'decrement')\n}\n\nreturn <>\n  <p> Counter: {counter} </p>\n  {!context.accountId &&\n    <p color=\"red\"> Please login to interact with the contract</p>\n  }\n  {context.accountId && \n  <>\n    <button onClick={add}> + </button>\n    <button onClick={subtract}> - </button>\n  </>\n  }\n</>","metadata":{"loc":{"lines":{"from":63,"to":78}}}}],["70",{"pageContent":"```\n\n</WidgetEditor>\n\n---","metadata":{"loc":{"lines":{"from":79,"to":83}}}}],["71",{"pageContent":"## Social from the Get-Go\n\nNEAR Components are easily integrated with [NEAR Social](https://near.social/), a social network built on NEAR.\n\n<WidgetEditor id=\"3\">\n\n```js\nconst item = (blockHeight) => ({ type: 'social', path: 'influencer.testnet/post/main', blockHeight });\n\n// retrieve indexed posts by influencer.testnet\nconst idx_posts = Social.index(\n  'post', 'main', { accountId: ['influencer.testnet'] }\n);\n\nif (idx_posts === null) return 'Loading...';","metadata":{"loc":{"lines":{"from":85,"to":99}}}}],["72",{"pageContent":"// retrieve likes for each post\nconst likes = idx_posts.map(\n  index => Social.index('like', item(index.blockHeight)).length\n);\n\n// retrieve data for each post\nconst post_data = idx_posts.map(\n  index => Social.get(`${index.accountId}/post/main`, index.blockHeight)\n);\n\n// defined \"Like\" function\nconst like = (blockHeight) => Social.set(\n  {index:{like: JSON.stringify({key: item(blockHeight), value: {type: 'like'}})}}\n)","metadata":{"loc":{"lines":{"from":101,"to":114}}}}],["73",{"pageContent":"return <>\n  <h5>Posts from <i>influencer.testnet</i></h5>\n  {post_data.map((post, idx) =>\n    <div className=\"mt-3\">\n      <div>{JSON.parse(post).text} - {likes[idx]} likes</div>\n      {context.accountId && <button className=\"btn btn-danger btn-sm\" onClick={() => like(idx_posts[idx].blockHeight)}>Like</button>}\n    </div>\n  )}\n</>","metadata":{"loc":{"lines":{"from":116,"to":124}}}}],["74",{"pageContent":"```\n\n</WidgetEditor>\n\n---","metadata":{"loc":{"lines":{"from":126,"to":130}}}}],["75",{"pageContent":"## Fully On-Chain & Easily Composable\n\nLeveraging the cheap storage and computation of the NEAR Blockchain, NEAR Components' code is stored fully on-chain in the SocialDB smart contract (`social.near`).\n\n<WidgetEditor height=\"40px\">\n\n```js\n// retrieving the code of a stored component\nreturn Social.get('influencer.testnet/widget/Greeter')","metadata":{"loc":{"lines":{"from":132,"to":140}}}}],["76",{"pageContent":"```\n\n</WidgetEditor>\n\nOnce deployed, a component can be imported and used by any other component. Composing components as LEGO blocks allows you to build complex applications.\n\n<WidgetEditor id=\"4\" height=\"80px\">\n\n```js\n// Rendering the component with props\nreturn <Widget src=\"influencer.testnet/widget/Greeter\"\n               props={{name: \"Anna\", amount: 3}} />;\n```\n</WidgetEditor>\n\n---","metadata":{"loc":{"lines":{"from":141,"to":156}}}}],["77",{"pageContent":"## Multi-Chain by Design\n\nNEAR Components can easily interact with Ethereum compatible blockchains, helping to easily create decentralized frontends for multi-chain applications.\n\n<WidgetEditor id=\"5\" height=\"100px\">","metadata":{"loc":{"lines":{"from":158,"to":162}}}}],["78",{"pageContent":"```js\nif (\n  state.chainId === undefined &&\n  ethers !== undefined &&\n  Ethers.send(\"eth_requestAccounts\", [])[0]\n) {\n  Ethers.provider()\n    .getNetwork()\n    .then((chainIdData) => {\n      if (chainIdData?.chainId) {\n        State.update({ chainId: chainIdData.chainId });\n      }\n    });\n}\nif (state.chainId !== undefined && state.chainId !== 1) {\n  return <p>Switch to Ethereum Mainnet</p>;\n}\n\n// FETCH LIDO ABI","metadata":{"loc":{"lines":{"from":164,"to":182}}}}],["79",{"pageContent":"const lidoContract = \"0xae7ab96520de3a18e5e111b5eaab095312d7fe84\";\nconst tokenDecimals = 18;\n\nconst lidoAbi = fetch(\n  \"https://raw.githubusercontent.com/lidofinance/lido-subgraph/master/abis/Lido.json\"\n);\nif (!lidoAbi.ok) {\n  return \"Loading\";\n}\n\nconst iface = new ethers.utils.Interface(lidoAbi.body);\n\n// FETCH LIDO STAKING APR","metadata":{"loc":{"lines":{"from":184,"to":196}}}}],["80",{"pageContent":"if (state.lidoArp === undefined) {\n  const apr = fetch(\n    \"https://api.allorigins.win/get?url=https://stake.lido.fi/api/sma-steth-apr\"\n  );\n  if (!apr) return;\n  State.update({ lidoArp: JSON.parse(apr?.body?.contents) ?? \"...\" });\n}\n\n// HELPER FUNCTIONS\n\nconst getStakedBalance = (receiver) => {\n  const encodedData = iface.encodeFunctionData(\"balanceOf\", [receiver]);","metadata":{"loc":{"lines":{"from":198,"to":209}}}}],["81",{"pageContent":"return Ethers.provider()\n    .call({\n      to: lidoContract,\n      data: encodedData,\n    })\n    .then((rawBalance) => {\n      const receiverBalanceHex = iface.decodeFunctionResult(\n        \"balanceOf\",\n        rawBalance\n      );\n\n      return Big(receiverBalanceHex.toString())\n        .div(Big(10).pow(tokenDecimals))\n        .toFixed(2)\n        .replace(/\\d(?=(\\d{3})+\\.)/g, \"$&,\");\n    });\n};","metadata":{"loc":{"lines":{"from":211,"to":227}}}}],["82",{"pageContent":"const submitEthers = (strEther, _referral) => {\n  if (!strEther) {\n    return console.log(\"Amount is missing\");\n  }\n  const erc20 = new ethers.Contract(\n    lidoContract,\n    lidoAbi.body,\n    Ethers.provider().getSigner()\n  );\n\n  let amount = ethers.utils.parseUnits(strEther, tokenDecimals).toHexString();\n\n  erc20.submit(lidoContract, { value: amount }).then((transactionHash) => {\n    console.log(\"transactionHash is \" + transactionHash);\n  });\n};\n\n// DETECT SENDER","metadata":{"loc":{"lines":{"from":229,"to":246}}}}],["83",{"pageContent":"if (state.sender === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ sender: accounts[0] });\n    console.log(\"set sender\", accounts[0]);\n  }\n}\n\n//if (!state.sender)  return \"Please login first\";\n\n// FETCH SENDER BALANCE","metadata":{"loc":{"lines":{"from":248,"to":258}}}}],["84",{"pageContent":"if (state.balance === undefined && state.sender) {\n  Ethers.provider()\n    .getBalance(state.sender)\n    .then((balance) => {\n      State.update({ balance: Big(balance).div(Big(10).pow(18)).toFixed(2) });\n    });\n}\n\n// FETCH SENDER STETH BALANCE\n\nif (state.stakedBalance === undefined && state.sender) {\n  getStakedBalance(state.sender).then((stakedBalance) => {\n    State.update({ stakedBalance });\n  });\n}\n\n// FETCH TX COST","metadata":{"loc":{"lines":{"from":260,"to":276}}}}],["85",{"pageContent":"if (state.txCost === undefined) {\n  const gasEstimate = ethers.BigNumber.from(1875000);\n  const gasPrice = ethers.BigNumber.from(1500000000);\n\n  const gasCostInWei = gasEstimate.mul(gasPrice);\n  const gasCostInEth = ethers.utils.formatEther(gasCostInWei);","metadata":{"loc":{"lines":{"from":278,"to":283}}}}],["86",{"pageContent":"let responseGql = fetch(\n    \"https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2\",\n    {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        query: `{\n          bundle(id: \"1\" ) {\n            ethPrice\n          }\n        }`,\n      }),\n    }\n  );\n\n  if (!responseGql) return \"\";\n\n  const ethPriceInUsd = responseGql.body.data.bundle.ethPrice;\n\n  const txCost = Number(gasCostInEth) * Number(ethPriceInUsd);","metadata":{"loc":{"lines":{"from":285,"to":304}}}}],["87",{"pageContent":"State.update({ txCost: `$${txCost.toFixed(2)}` });\n}\n\n// FETCH CSS\n\nconst cssFont = fetch(\n  \"https://fonts.googleapis.com/css2?family=Manrope:wght@200;300;400;500;600;700;800\"\n).body;\nconst css = fetch(\n  \"https://pluminite.mypinata.cloud/ipfs/Qmboz8aoSvVXLeP5pZbRtNKtDD3kX5D9DEnfMn2ZGSJWtP\"\n).body;\n\nif (!cssFont || !css) return \"\";","metadata":{"loc":{"lines":{"from":306,"to":318}}}}],["88",{"pageContent":"if (!state.theme) {\n  State.update({\n    theme: styled.div`\n    font-family: Manrope, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\n    ${cssFont}\n    ${css}\n`,\n  });\n}\nconst Theme = state.theme;\n\n// OUTPUT UI\n\nconst getSender = () => {\n  return !state.sender\n    ? \"\"\n    : state.sender.substring(0, 6) +\n        \"...\" +\n        state.sender.substring(state.sender.length - 4, state.sender.length);\n};","metadata":{"loc":{"lines":{"from":320,"to":339}}}}],["89",{"pageContent":"return (\n  <Theme>\n    <div className=\"LidoContainer\">\n      <div className=\"Header\">Stake Ether</div>\n      <div className=\"SubHeader\">Stake ETH and receive stETH while staking.</div>","metadata":{"loc":{"lines":{"from":341,"to":345}}}}],["90",{"pageContent":"<div className=\"LidoForm\">\n        {state.sender && (\n          <>\n            <div className=\"LidoFormTopContainer\">\n              <div className=\"LidoFormTopContainerLeft\">\n                <div className=\"LidoFormTopContainerLeftContent1\">\n                  <div className=\"LidoFormTopContainerLeftContent1Container\">\n                    <span>Available to stake</span>\n                    <div className=\"LidoFormTopContainerLeftContent1Circle\" />\n                  </div>","metadata":{"loc":{"lines":{"from":347,"to":356}}}}],["91",{"pageContent":"</div>\n                <div className=\"LidoFormTopContainerLeftContent2\">\n                  <span>\n                    {state.balance ?? (!state.sender ? \"0\" : \"...\")}&nbsp;ETH\n                  </span>\n                </div>\n              </div>\n              <div className=\"LidoFormTopContainerRight\">\n                <div className=\"LidoFormTopContainerRightContent1\">\n                  <div className=\"LidoFormTopContainerRightContent1Text\">","metadata":{"loc":{"lines":{"from":357,"to":366}}}}],["92",{"pageContent":"<span>{getSender()}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"LidoSplitter\" />\n          </>\n        )}\n        <div\n          className={\n            state.sender ? \"LidoFormBottomContainer\" : \"LidoFormTopContainer\"\n          }\n        >\n          <div className=\"LidoFormTopContainerLeft\">\n            <div className=\"LidoFormTopContainerLeftContent1\">","metadata":{"loc":{"lines":{"from":367,"to":381}}}}],["93",{"pageContent":"<div className=\"LidoFormTopContainerLeftContent1Container\">\n                <span>Staked amount</span>\n              </div>\n            </div>\n            <div className=\"LidoFormTopContainerLeftContent2\">\n              <span>\n                {state.stakedBalance ?? (!state.sender ? \"0\" : \"...\")}\n                &nbsp;stETH\n              </span>\n            </div>\n          </div>\n          <div className=\"LidoFormTopContainerRight\">\n            <div className=\"LidoAprContainer\">","metadata":{"loc":{"lines":{"from":382,"to":394}}}}],["94",{"pageContent":"<div className=\"LidoAprTitle\">Lido APR</div>\n              <div className=\"LidoAprValue\">{state.lidoArp ?? \"...\"}%</div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"LidoStakeForm\">\n        <div className=\"LidoStakeFormInputContainer\">\n          <span className=\"LidoStakeFormInputContainerSpan1\">\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n              <path\n                opacity=\"0.6\"","metadata":{"loc":{"lines":{"from":395,"to":406}}}}],["95",{"pageContent":"d=\"M11.999 3.75v6.098l5.248 2.303-5.248-8.401z\"\n              ></path>\n              <path d=\"M11.999 3.75L6.75 12.151l5.249-2.303V3.75z\"></path>\n              <path\n                opacity=\"0.6\"\n                d=\"M11.999 16.103v4.143l5.251-7.135L12 16.103z\"\n              ></path>\n              <path d=\"M11.999 20.246v-4.144L6.75 13.111l5.249 7.135z\"></path>\n              <path\n                opacity=\"0.2\"\n                d=\"M11.999 15.144l5.248-2.993-5.248-2.301v5.294z\"","metadata":{"loc":{"lines":{"from":407,"to":417}}}}],["96",{"pageContent":"></path>\n              <path\n                opacity=\"0.6\"\n                d=\"M6.75 12.151l5.249 2.993V9.85l-5.249 2.3z\"\n              ></path>\n            </svg>\n          </span>\n          <span className=\"LidoStakeFormInputContainerSpan2\">\n            <input\n              disabled={!state.sender}\n              className=\"LidoStakeFormInputContainerSpan2Input\"\n              value={state.strEther}\n              onChange={(e) => State.update({ strEther: e.target.value })}","metadata":{"loc":{"lines":{"from":418,"to":430}}}}],["97",{"pageContent":"placeholder=\"Amount\"\n            />\n          </span>\n          <span\n            className=\"LidoStakeFormInputContainerSpan3\"\n            onClick={() => {\n              State.update({\n                strEther: (state.balance > 0.05\n                  ? parseFloat(state.balance) - 0.05\n                  : 0\n                ).toFixed(2),\n              });\n            }}\n          >\n            <button\n              className=\"LidoStakeFormInputContainerSpan3Content\"","metadata":{"loc":{"lines":{"from":431,"to":446}}}}],["98",{"pageContent":"disabled={!state.sender}\n            >\n              <span className=\"LidoStakeFormInputContainerSpan3Max\">MAX</span>\n            </button>\n          </span>\n        </div>\n        {!!state.sender ? (\n          <button\n            className=\"LidoStakeFormSubmitContainer\"\n            onClick={() => submitEthers(state.strEther, state.sender)}\n          >\n            <span>Submit</span>\n          </button>\n        ) : (\n          <Web3Connect","metadata":{"loc":{"lines":{"from":447,"to":461}}}}],["99",{"pageContent":"className=\"LidoStakeFormSubmitContainer\"\n            connectLabel=\"Connect with Web3\"\n          />\n        )}","metadata":{"loc":{"lines":{"from":462,"to":465}}}}],["100",{"pageContent":"<div className=\"LidoFooterContainer\">\n          {state.sender && (\n            <div className=\"LidoFooterRaw\">\n              <div className=\"LidoFooterRawLeft\">You will receive</div>\n              <div className=\"LidoFooterRawRight\">${state.strEther ?? 0} stETH</div>\n            </div>\n          )}\n          <div className=\"LidoFooterRaw\">\n            <div className=\"LidoFooterRawLeft\">Exchange rate</div>\n            <div className=\"LidoFooterRawRight\">1 ETH = 1 stETH</div>","metadata":{"loc":{"lines":{"from":467,"to":476}}}}],["101",{"pageContent":"</div>\n          {false && (\n            <div className=\"LidoFooterRaw\">\n              <div className=\"LidoFooterRawLeft\">Transaction cost</div>\n              <div className=\"LidoFooterRawRight\">{state.txCost}</div>\n            </div>\n          )}\n          <div className=\"LidoFooterRaw\">\n            <div className=\"LidoFooterRawLeft\">Reward fee</div>\n            <div className=\"LidoFooterRawRight\">10%</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </Theme>\n);","metadata":{"loc":{"lines":{"from":477,"to":492}}}}],["102",{"pageContent":"```\n\n</WidgetEditor>\n\n:::danger ETH Disabled in Docs\nFor security reasons, interacting with Ethereum is disabled in our documentation. To see a working example please navigate to the [deployed NEAR Component](https://near.social/zavodil.near/widget/Lido).\n:::\n\n---","metadata":{"loc":{"lines":{"from":493,"to":501}}}}],["103",{"pageContent":"## Next Steps\nBuild and deploy your first components without leaving the browser. Go to https://near.org/sandbox , create an account and start building!","metadata":{"loc":{"lines":{"from":504,"to":505}}}}],["104",{"pageContent":"---\nid: interaction\ntitle: Smart Contract Interaction\n---\n\nYour frontend can interact with different blockchains using the built-in BOS API. Let's see how to create an application that reads and stores a greeting from a NEAR smart contract. \n\n![widgets](/docs/hello-near-logedin.png)\n*View of our Hello Near app when the user is logged-in*\n\n:::info\nCheck the finished example at [near.social code page](https://near.social/#/mob.near/widget/WidgetSource?src=gagdiez.near/widget/HelloNear).\n:::\n\n---","metadata":{"loc":{"lines":{"from":1,"to":15}}}}],["105",{"pageContent":"## The Contract\n\nWe have deployed a `Hello World` smart contract in the NEAR network at `hello.near-examples.near`. The contract exposes two methods:\n- `set_greeting(greeting: string): void`, which accepts a greeting and stores it in the contract state.\n- `get_greeting(): string` which returns the stored greeting.\n\n---","metadata":{"loc":{"lines":{"from":17,"to":23}}}}],["106",{"pageContent":"## Retrieving the Greeting\nSince we want to interact with the NEAR network, we will use the `Near` object from the BOS API.\n\n```ts\nconst contract = \"hello.near-examples.near\";\nconst greeting = Near.view(contract, \"get_greeting\", {});\n\nreturn <div>{greeting} World</div>;\n```\n\nAssuming the contract is storing `\"Hello\"`, this will render a simple:\n\n```json\nHello World\n```\n\n---","metadata":{"loc":{"lines":{"from":25,"to":41}}}}],["107",{"pageContent":"## Changing the Greeting\nTo modify the greeting, we simply need to use `Near.call` to call the `set_greeting` method. This however, requires us to have a frontend in which the user can input the new greeting.\n\nLets create it in two steps:\n1. Build the HTML that will be rendered\n2. Add the logic to handle the function call\n\n<hr className=\"subsection\" />","metadata":{"loc":{"lines":{"from":43,"to":50}}}}],["108",{"pageContent":"### 1. HTML Components\nUse the following code to create a simple frontend, composed by a title, an input form to change the greeting, and a button to submit the change.\n\n```js\nconst contract = \"hello.near-examples.near\";\nconst greeting = Near.view(contract, \"get_greeting\", {});","metadata":{"loc":{"lines":{"from":52,"to":57}}}}],["109",{"pageContent":"// Define components\nconst greetingForm = (\n  <>\n    <div className=\"border border-black p-3\">\n      <label>Update greeting</label>\n      <input placeholder=\"Howdy\" onChange={onInputChange} />\n      <button className=\"btn btn-primary mt-2\" onClick={onBtnClick}>\n        Save\n      </button>\n    </div>\n  </>\n);\n\nconst notLoggedInWarning = <p> Login to change the greeting </p>;","metadata":{"loc":{"lines":{"from":59,"to":72}}}}],["110",{"pageContent":"// Render\nreturn (\n  <>\n    <div className=\"container border border-info p-3\">\n      <h3 className=\"text-center\">\n        The contract says:\n        <span className=\"text-decoration-underline\"> {greeting} </span>\n      </h3>\n\n      <p className=\"text-center py-2\">\n        Look at that! A greeting stored on the NEAR blockchain.\n      </p>\n\n      {context.accountId ? greetingForm : notLoggedInWarning}\n    </div>\n  </>\n);","metadata":{"loc":{"lines":{"from":74,"to":90}}}}],["111",{"pageContent":"```\n\n:::info Relevant HTML\nThere are two important things to notice in the code above:\n\n1. **onChange & onClick**: We have prepared our `<input>` and `<button>` to act when something happens. Particularly, we will build two methods: one when the input changes, and one when the button is pressed.\n\n2. **context.accountId**: We check if `context.accountId` is set, which tells us if the user has logged in using their NEAR account, and thus can interact with NEAR contracts.\n:::","metadata":{"loc":{"lines":{"from":91,"to":99}}}}],["112",{"pageContent":"<hr className=\"subsection\" />","metadata":{"loc":{"lines":{"from":101,"to":101}}}}],["113",{"pageContent":"### 2. Handling User's Input\nHaving our component's view ready, we now need to define the logic for when the user inputs a new greeting and presses the `Submit` button. This is, we need to define the `onInputChange` and `onBtnClick` methods.","metadata":{"loc":{"lines":{"from":103,"to":104}}}}],["114",{"pageContent":"#### onInputChange\nWhen the user inputs a new greeting, we want to store it somewhere until the `Submit` button is pressed, for this, we can use the [application's State](../api/state.md).\n\nIn BOS, the state is initialized through `State.init`, updated with `State.update`, and accessed through the `state` variable (notice the lowercase). Lets store the new greeting in the App's state:\n\n```js\nState.init({ new_greeting: \"\" });","metadata":{"loc":{"lines":{"from":106,"to":112}}}}],["115",{"pageContent":"const onInputChange = ({ target }) => {\n  State.update({ new_greeting: target.value });\n};\n```","metadata":{"loc":{"lines":{"from":114,"to":117}}}}],["116",{"pageContent":"#### onBtnClick\nThe only thing left to do, is to handle when the user clicks the `Submit` button. What we want is to check if the user changed the greeting, and submit it to the contract.\n\n```js\nconst onBtnClick = () => {\n  if (!state.new_greeting) {\n    return;\n  }\n\n  Near.call(contract, \"set_greeting\", {\n    greeting: state.new_greeting,\n  });\n};\n```\n\n---","metadata":{"loc":{"lines":{"from":119,"to":134}}}}],["117",{"pageContent":"## Complete Example\nWe have deployed a complete version of this example on the NEAR blockchain, so you can see its code and play with it.\n\n:::tip\n- **Code**: Check the code of this example at the [near.social code page](https://near.social/#/mob.near/widget/WidgetSource?src=gagdiez.near/widget/HelloNear).\n\n- **Try It**: Interact with the application at the [near.social page](https://near.social/#/gagdiez.near/widget/HelloNear).\n:::","metadata":{"loc":{"lines":{"from":136,"to":143}}}}],["118",{"pageContent":"---\nid: lido\ntitle: Lido Example\n---\n\n# Hello Lido!\n\nIf you are ready to explore further, the [Lido component](https://near.org/zavodil.near/widget/Lido) serves as an excellent fully-fledged example, as it demonstrates how to interact with a smart contract deployed on the Ethereum mainnet.\n\n:::info Ethers.js","metadata":{"loc":{"lines":{"from":1,"to":10}}}}],["119",{"pageContent":"This component uses the [Ethers JavaScript](https://ethers.org) library to interact with Ethereum smart contracts. Follow [this link](https://docs.ethers.org/v6/) for the official `ethers.js` documentation.\n\n:::\n\n:::info Web3 connect","metadata":{"loc":{"lines":{"from":12,"to":16}}}}],["120",{"pageContent":"The Lido example uses the [Web3Connect component](https://near.org/near/widget/ComponentDetailsPage?src=a_liutiev.near/widget/button_web3connect) to provide a [WalletConnect modal](https://github.com/WalletConnect/web3modal) so the user can connect with any Web3 Ethereum wallet like Ledger or MetaMask.\n\n:::","metadata":{"loc":{"lines":{"from":18,"to":20}}}}],["121",{"pageContent":"### Fork the component\n\n1. Navigate to [the component](https://near.org/near/widget/ComponentDetailsPage?src=zavodil.near/widget/Lido)\n2. Select `Fork`\n3. Feel free to make any changes\n4. Click on <kbd>Save</kbd> to deploy the component\n\n:::note\nTo deploy the component, you'll need to sign in with a NEAR account and to make a deposit of a small amount of NEAR for the storage cost. This is because the components are stored in the NEAR network.\n:::","metadata":{"loc":{"lines":{"from":23,"to":32}}}}],["122",{"pageContent":"### Source code\n\n```js\nif (\n  state.chainId === undefined &&\n  ethers !== undefined &&\n  Ethers.send(\"eth_requestAccounts\", [])[0]\n) {\n  Ethers.provider()\n    .getNetwork()\n    .then((chainIdData) => {\n      if (chainIdData?.chainId) {\n        State.update({ chainId: chainIdData.chainId });\n      }\n    });\n}\nif (state.chainId !== undefined && state.chainId !== 1) {\n  return <p>Switch to Ethereum Mainnet</p>;\n}\n\n// FETCH LIDO ABI","metadata":{"loc":{"lines":{"from":34,"to":54}}}}],["123",{"pageContent":"const lidoContract = \"0xae7ab96520de3a18e5e111b5eaab095312d7fe84\";\nconst tokenDecimals = 18;\n\nconst lidoAbi = fetch(\n  \"https://raw.githubusercontent.com/lidofinance/lido-subgraph/master/abis/Lido.json\"\n);\nif (!lidoAbi.ok) {\n  return \"Loading\";\n}\n\nconst iface = new ethers.utils.Interface(lidoAbi.body);\n\n// FETCH LIDO STAKING APR","metadata":{"loc":{"lines":{"from":56,"to":68}}}}],["124",{"pageContent":"if (state.lidoArp === undefined) {\n  const apr = fetch(\n    \"https://api.allorigins.win/get?url=https://stake.lido.fi/api/sma-steth-apr\"\n  );\n  if (!apr) return;\n  State.update({ lidoArp: JSON.parse(apr?.body?.contents) ?? \"...\" });\n}\n\n// HELPER FUNCTIONS\n\nconst getStakedBalance = (receiver) => {\n  const encodedData = iface.encodeFunctionData(\"balanceOf\", [receiver]);","metadata":{"loc":{"lines":{"from":70,"to":81}}}}],["125",{"pageContent":"return Ethers.provider()\n    .call({\n      to: lidoContract,\n      data: encodedData,\n    })\n    .then((rawBalance) => {\n      const receiverBalanceHex = iface.decodeFunctionResult(\n        \"balanceOf\",\n        rawBalance\n      );\n\n      return Big(receiverBalanceHex.toString())\n        .div(Big(10).pow(tokenDecimals))\n        .toFixed(2)\n        .replace(/\\d(?=(\\d{3})+\\.)/g, \"$&,\");\n    });\n};","metadata":{"loc":{"lines":{"from":83,"to":99}}}}],["126",{"pageContent":"const submitEthers = (strEther, _referral) => {\n  if (!strEther) {\n    return console.log(\"Amount is missing\");\n  }\n  const erc20 = new ethers.Contract(\n    lidoContract,\n    lidoAbi.body,\n    Ethers.provider().getSigner()\n  );\n\n  let amount = ethers.utils.parseUnits(strEther, tokenDecimals).toHexString();\n\n  erc20.submit(lidoContract, { value: amount }).then((transactionHash) => {\n    console.log(\"transactionHash is \" + transactionHash);\n  });\n};\n\n// DETECT SENDER","metadata":{"loc":{"lines":{"from":101,"to":118}}}}],["127",{"pageContent":"if (state.sender === undefined) {\n  const accounts = Ethers.send(\"eth_requestAccounts\", []);\n  if (accounts.length) {\n    State.update({ sender: accounts[0] });\n    console.log(\"set sender\", accounts[0]);\n  }\n}\n\n//if (!state.sender)  return \"Please login first\";\n\n// FETCH SENDER BALANCE","metadata":{"loc":{"lines":{"from":120,"to":130}}}}],["128",{"pageContent":"if (state.balance === undefined && state.sender) {\n  Ethers.provider()\n    .getBalance(state.sender)\n    .then((balance) => {\n      State.update({ balance: Big(balance).div(Big(10).pow(18)).toFixed(2) });\n    });\n}\n\n// FETCH SENDER STETH BALANCE\n\nif (state.stakedBalance === undefined && state.sender) {\n  getStakedBalance(state.sender).then((stakedBalance) => {\n    State.update({ stakedBalance });\n  });\n}\n\n// FETCH TX COST","metadata":{"loc":{"lines":{"from":132,"to":148}}}}],["129",{"pageContent":"if (state.txCost === undefined) {\n  const gasEstimate = ethers.BigNumber.from(1875000);\n  const gasPrice = ethers.BigNumber.from(1500000000);\n\n  const gasCostInWei = gasEstimate.mul(gasPrice);\n  const gasCostInEth = ethers.utils.formatEther(gasCostInWei);","metadata":{"loc":{"lines":{"from":150,"to":155}}}}],["130",{"pageContent":"let responseGql = fetch(\n    \"https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2\",\n    {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        query: `{\n          bundle(id: \"1\" ) {\n            ethPrice\n          }\n        }`,\n      }),\n    }\n  );\n\n  if (!responseGql) return \"\";\n\n  const ethPriceInUsd = responseGql.body.data.bundle.ethPrice;\n\n  const txCost = Number(gasCostInEth) * Number(ethPriceInUsd);","metadata":{"loc":{"lines":{"from":157,"to":176}}}}],["131",{"pageContent":"State.update({ txCost: `$${txCost.toFixed(2)}` });\n}\n\n// FETCH CSS\n\nconst cssFont = fetch(\n  \"https://fonts.googleapis.com/css2?family=Manrope:wght@200;300;400;500;600;700;800\"\n).body;\nconst css = fetch(\n  \"https://pluminite.mypinata.cloud/ipfs/Qmboz8aoSvVXLeP5pZbRtNKtDD3kX5D9DEnfMn2ZGSJWtP\"\n).body;\n\nif (!cssFont || !css) return \"\";","metadata":{"loc":{"lines":{"from":178,"to":190}}}}],["132",{"pageContent":"if (!state.theme) {\n  State.update({\n    theme: styled.div`\n    font-family: Manrope, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\n    ${cssFont}\n    ${css}\n`,\n  });\n}\nconst Theme = state.theme;\n\n// OUTPUT UI\n\nconst getSender = () => {\n  return !state.sender\n    ? \"\"\n    : state.sender.substring(0, 6) +\n        \"...\" +\n        state.sender.substring(state.sender.length - 4, state.sender.length);\n};","metadata":{"loc":{"lines":{"from":192,"to":211}}}}],["133",{"pageContent":"return (\n  <Theme>\n    <div className=\"LidoContainer\">\n      <div className=\"Header\">Stake Ether</div>\n      <div className=\"SubHeader\">Stake ETH and receive stETH while staking.</div>","metadata":{"loc":{"lines":{"from":213,"to":217}}}}],["134",{"pageContent":"<div className=\"LidoForm\">\n        {state.sender && (\n          <>\n            <div className=\"LidoFormTopContainer\">\n              <div className=\"LidoFormTopContainerLeft\">\n                <div className=\"LidoFormTopContainerLeftContent1\">\n                  <div className=\"LidoFormTopContainerLeftContent1Container\">\n                    <span>Available to stake</span>\n                    <div className=\"LidoFormTopContainerLeftContent1Circle\" />\n                  </div>","metadata":{"loc":{"lines":{"from":219,"to":228}}}}],["135",{"pageContent":"</div>\n                <div className=\"LidoFormTopContainerLeftContent2\">\n                  <span>\n                    {state.balance ?? (!state.sender ? \"0\" : \"...\")}&nbsp;ETH\n                  </span>\n                </div>\n              </div>\n              <div className=\"LidoFormTopContainerRight\">\n                <div className=\"LidoFormTopContainerRightContent1\">\n                  <div className=\"LidoFormTopContainerRightContent1Text\">","metadata":{"loc":{"lines":{"from":229,"to":238}}}}],["136",{"pageContent":"<span>{getSender()}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"LidoSplitter\" />\n          </>\n        )}\n        <div\n          className={\n            state.sender ? \"LidoFormBottomContainer\" : \"LidoFormTopContainer\"\n          }\n        >\n          <div className=\"LidoFormTopContainerLeft\">\n            <div className=\"LidoFormTopContainerLeftContent1\">","metadata":{"loc":{"lines":{"from":239,"to":253}}}}],["137",{"pageContent":"<div className=\"LidoFormTopContainerLeftContent1Container\">\n                <span>Staked amount</span>\n              </div>\n            </div>\n            <div className=\"LidoFormTopContainerLeftContent2\">\n              <span>\n                {state.stakedBalance ?? (!state.sender ? \"0\" : \"...\")}\n                &nbsp;stETH\n              </span>\n            </div>\n          </div>\n          <div className=\"LidoFormTopContainerRight\">\n            <div className=\"LidoAprContainer\">","metadata":{"loc":{"lines":{"from":254,"to":266}}}}],["138",{"pageContent":"<div className=\"LidoAprTitle\">Lido APR</div>\n              <div className=\"LidoAprValue\">{state.lidoArp ?? \"...\"}%</div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"LidoStakeForm\">\n        <div className=\"LidoStakeFormInputContainer\">\n          <span className=\"LidoStakeFormInputContainerSpan1\">\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n              <path\n                opacity=\"0.6\"","metadata":{"loc":{"lines":{"from":267,"to":278}}}}],["139",{"pageContent":"d=\"M11.999 3.75v6.098l5.248 2.303-5.248-8.401z\"\n              ></path>\n              <path d=\"M11.999 3.75L6.75 12.151l5.249-2.303V3.75z\"></path>\n              <path\n                opacity=\"0.6\"\n                d=\"M11.999 16.103v4.143l5.251-7.135L12 16.103z\"\n              ></path>\n              <path d=\"M11.999 20.246v-4.144L6.75 13.111l5.249 7.135z\"></path>\n              <path\n                opacity=\"0.2\"\n                d=\"M11.999 15.144l5.248-2.993-5.248-2.301v5.294z\"","metadata":{"loc":{"lines":{"from":279,"to":289}}}}],["140",{"pageContent":"></path>\n              <path\n                opacity=\"0.6\"\n                d=\"M6.75 12.151l5.249 2.993V9.85l-5.249 2.3z\"\n              ></path>\n            </svg>\n          </span>\n          <span className=\"LidoStakeFormInputContainerSpan2\">\n            <input\n              disabled={!state.sender}\n              className=\"LidoStakeFormInputContainerSpan2Input\"\n              value={state.strEther}\n              onChange={(e) => State.update({ strEther: e.target.value })}","metadata":{"loc":{"lines":{"from":290,"to":302}}}}],["141",{"pageContent":"placeholder=\"Amount\"\n            />\n          </span>\n          <span\n            className=\"LidoStakeFormInputContainerSpan3\"\n            onClick={() => {\n              State.update({\n                strEther: (state.balance > 0.05\n                  ? parseFloat(state.balance) - 0.05\n                  : 0\n                ).toFixed(2),\n              });\n            }}\n          >\n            <button\n              className=\"LidoStakeFormInputContainerSpan3Content\"","metadata":{"loc":{"lines":{"from":303,"to":318}}}}],["142",{"pageContent":"disabled={!state.sender}\n            >\n              <span className=\"LidoStakeFormInputContainerSpan3Max\">MAX</span>\n            </button>\n          </span>\n        </div>\n        {!!state.sender ? (\n          <button\n            className=\"LidoStakeFormSubmitContainer\"\n            onClick={() => submitEthers(state.strEther, state.sender)}\n          >\n            <span>Submit</span>\n          </button>\n        ) : (\n          <Web3Connect","metadata":{"loc":{"lines":{"from":319,"to":333}}}}],["143",{"pageContent":"className=\"LidoStakeFormSubmitContainer\"\n            connectLabel=\"Connect with Web3\"\n          />\n        )}","metadata":{"loc":{"lines":{"from":334,"to":337}}}}],["144",{"pageContent":"<div className=\"LidoFooterContainer\">\n          {state.sender && (\n            <div className=\"LidoFooterRaw\">\n              <div className=\"LidoFooterRawLeft\">You will receive</div>\n              <div className=\"LidoFooterRawRight\">${state.strEther ?? 0} stETH</div>\n            </div>\n          )}\n          <div className=\"LidoFooterRaw\">\n            <div className=\"LidoFooterRawLeft\">Exchange rate</div>\n            <div className=\"LidoFooterRawRight\">1 ETH = 1 stETH</div>","metadata":{"loc":{"lines":{"from":339,"to":348}}}}],["145",{"pageContent":"</div>\n          {false && (\n            <div className=\"LidoFooterRaw\">\n              <div className=\"LidoFooterRawLeft\">Transaction cost</div>\n              <div className=\"LidoFooterRawRight\">{state.txCost}</div>\n            </div>\n          )}\n          <div className=\"LidoFooterRaw\">\n            <div className=\"LidoFooterRawLeft\">Reward fee</div>\n            <div className=\"LidoFooterRawRight\">10%</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </Theme>\n);\n```","metadata":{"loc":{"lines":{"from":349,"to":365}}}}],["146",{"pageContent":"#### Fork the component\n\n1. Navigate to [the component](https://near.org/near/widget/ComponentDetailsPage?src=zavodil.near/widget/Lido)\n2. Select `Fork`\n3. Feel free to make any changes\n4. Click on <kbd>Save</kbd> to deploy the component\n\n:::note\nTo deploy the component, you'll need to sign in with a NEAR account and to make a deposit of a small amount of NEAR for the storage cost. This is because NEAR components are stored in the NEAR network.\n:::","metadata":{"loc":{"lines":{"from":367,"to":376}}}}],["147",{"pageContent":"---\nid: ds-components\ntitle: Design Components\n---\n\n# Design System Components\n\nWhen building components, the NEAR VM provides a complete set of [Radix primitives](https://www.radix-ui.com/docs/primitives/overview/introduction) to simplify UI development.","metadata":{"loc":{"lines":{"from":1,"to":8}}}}],["148",{"pageContent":"## Radix UI\n\nUsing embedded Radix primitives on the NEAR VM is simple and straight-forward. You don't need to import any files:\n\n```js\nreturn (\n    <Label.Root className=\"LabelRoot\">\n      Hello World!\n    </Label.Root>\n);\n```\n\n:::caution Limitations\n\nCurrently, NEAR VM impose some limitations on the Radix UI framework:\n\n- `Form` component is not available.\n- You can't use `.Portal` definitions.\n- Using CSS is different. You'll have to use a `styled.div` wrapper.\n\n:::","metadata":{"loc":{"lines":{"from":10,"to":30}}}}],["149",{"pageContent":"### Using CSS\n\nHere is an example on how to use CSS through the `styled.div` wrapper:\n\n```js\nconst Wrapper = styled.div`\n  .SwitchRoot {\n    ...\n  }\n  .SwitchThumb {\n    ...\n  }\n`;\n\nreturn (\n  <Wrapper>\n    <Switch.Root className=\"SwitchRoot\">\n      <Switch.Thumb className=\"SwitchThumb\" />\n    </Switch.Root>\n  </Wrapper>\n);\n```\n\n:::tip Using Wrapper\n\n[Example widget using Wrapper](https://near.org/#/near/widget/ComponentDetailsPage?src=near/widget/RadixTooltipTest)\n\n:::","metadata":{"loc":{"lines":{"from":32,"to":59}}}}],["150",{"pageContent":"### Using `styled-components`\n\nYou can use [`styled-components`](../api/builtin-components.md#styled-components) in combination with Radix UI primitives. Here's an example:\n\n```js\nconst SwitchRoot = styled(\"Switch.Root\")`\n  all: unset;\n  display: block;\n  width: 42px;\n  height: 25px;\n  background-color: var(--blackA9);\n  border-radius: 9999px;\n  position: relative;\n  box-shadow: 0 2px 10px var(--blackA7);\n\n  &[data-state=\"checked\"] {\n    background-color: black;\n  }\n`;","metadata":{"loc":{"lines":{"from":61,"to":79}}}}],["151",{"pageContent":"const SwitchThumb = styled(\"Switch.Thumb\")`\n  all: unset;\n  display: block;\n  width: 21px;\n  height: 21px;\n  background-color: white;\n  border-radius: 9999px;\n  box-shadow: 0 2px 2px var(--blackA7);\n  transition: transform 100ms;\n  transform: translateX(2px);\n  will-change: transform;\n\n  &[data-state=\"checked\"] {\n    transform: translateX(19px);\n  }\n`;\n\nreturn (\n  <SwitchRoot>\n    <SwitchThumb />\n  </SwitchRoot>\n);","metadata":{"loc":{"lines":{"from":81,"to":102}}}}],["152",{"pageContent":"```\n\n:::tip Using styled components\n\n[Example widget using styled components to style Radix UI](https://near.org/#/near/widget/ComponentDetailsPage?src=near/widget/RadixSwitchTest).\n\n:::","metadata":{"loc":{"lines":{"from":103,"to":109}}}}],["153",{"pageContent":"### Forward references\n\nThe NEAR VM re-implements [React's forwardRef](https://react.dev/reference/react/forwardRef#reference) as `ref=\"forwardedRef\"`.\n\nYou can use `ref=\"forwardedRef\"` to forward references through `<Widget />` to support Radix's `asChild` property:\n\n```js title='Dialog.jsx'\n<AlertDialog.Trigger asChild>\n  <Widget\n    src=\"near/widget/TestButton\"\n    props={{ label: \"Click Me\" }}\n  />\n</AlertDialog.Trigger>","metadata":{"loc":{"lines":{"from":111,"to":123}}}}],["154",{"pageContent":"```\n\n```js title='TestButton.jsx'\nconst Button = styled.button`\n  background: #f00;\n`;\n\nreturn (\n  <Button type=\"button\" ref=\"forwardedRef\">\n    {props.label}: Forwarded\n  </Button>\n);\n```","metadata":{"loc":{"lines":{"from":124,"to":136}}}}],["155",{"pageContent":"## DIG components\n\nThese are the Design Interface Guidelines (DIG) components available on the NEAR VM:\n\n- [DIG.Button](https://near.org/#/near/widget/ComponentDetailsPage?src=near/widget/DIG.Button)\n- [DIG.Theme](https://near.org/#/near/widget/ComponentDetailsPage?src=near/widget/DIG.Theme)","metadata":{"loc":{"lines":{"from":138,"to":143}}}}],["156",{"pageContent":"### `DIG.Button`\n\nA fully featured button component that can act as a `<button>` or `<a>` tag.\n\n:::info DIG.Button properties\n[Click here](https://near.org/#/near/widget/ComponentDetailsPage?src=near/widget/DIG.Button&tab=about) for properties and details.\n\n:::","metadata":{"loc":{"lines":{"from":145,"to":152}}}}],["157",{"pageContent":"### `DIG.Theme`\n\nThis component wraps all of NEAR Components so you don't need to render it yourself.\n\n:::tip\nYou can use any of the [CSS variables](https://near.org/near/widget/ComponentDetailsPage?src=near/widget/DIG.Theme&tab=source) defined inside `DIG.Theme`.\n:::","metadata":{"loc":{"lines":{"from":154,"to":160}}}}],["158",{"pageContent":"---\nid: ethers-js\ntitle: NEAR for Ethereum developers\n---\n\nimport {WidgetEditor} from \"@site/src/components/widget-editor\"\n\nNEAR components are chain-agnostic, enabling you to create decentralized frontends tailored for any Ethereum dApps. Throughout this article, we'll navigate prevalent use-cases with code snippets. You’ll also find links to exemplary NEAR components for reference.\n\n---","metadata":{"loc":{"lines":{"from":1,"to":10}}}}],["159",{"pageContent":"## Interact with Ethereum using Ethers.js\n\nThe NEAR VM has imported the [Ethers.js](https://docs.ethers.org/) library, allowing for seamless interaction with Ethereum nodes using JavaScript in a NEAR component.","metadata":{"loc":{"lines":{"from":12,"to":14}}}}],["160",{"pageContent":"The `Ethers` object exposes the provider connection:\n- `Ethers.provider()` is a read-only connection to the blockchain, which allows querying the blockchain state (e.g., account, block or transaction details), querying event logs or evaluating read-only code using call.\n  - `Ethers.provider().getSigner()` abstracts the class that interacts with an account\n    - `Ethers.provider().getSigner().getBalance()` returns a Promise that resolves to the account address.","metadata":{"loc":{"lines":{"from":16,"to":19}}}}],["161",{"pageContent":"- `Ethers.provider().getBlockNumber()` looks up the current block number (i.e. height)\n  - `Ethers.provider().getFeeData()` gets the best guess at the recommended FeeData","metadata":{"loc":{"lines":{"from":20,"to":21}}}}],["162",{"pageContent":"You can see various ways of using `Ethers` objects on the [Ethers documentation portal](https://docs.ethers.org/)).","metadata":{"loc":{"lines":{"from":23,"to":23}}}}],["163",{"pageContent":"---\n    \nFurthermore, numerous [basic tools](https://docs.ethers.org/v6/api/utils/)  can be found in the ethers.utils object (be aware of the lowercase 'e').\n- `ethers.utils.parseUnits(value, unit)` converts the decimal string value to a BigInt, assuming unit decimal places. The unit may the number of decimal places or the name of a unit (e.g. \"gwei\" for 9 decimal places).\n- `ethers.utils.formatEther(wei)` converts value into a decimal string using 18 decimal places.","metadata":{"loc":{"lines":{"from":25,"to":29}}}}],["164",{"pageContent":"#### Example showing the difference between `Ethers.provider()` and `ethers.utils`:\n```ts\n    Ethers.provider()\n        .getSigner()\n        .getBalance()\n        .then((balance) => {\n            console.log(\"Your ETH balance: \", ethers.utils.formatEther(balance))\n        });\n```","metadata":{"loc":{"lines":{"from":31,"to":39}}}}],["165",{"pageContent":"## FAQ\n\n### How to get a user account?\n\n```ts\nconst receiver = Ethers.provider().send(\"eth_requestAccounts\", [])[0];\n```\n\n### How to get the current chain ID?\n\n```ts\nEthers.provider().getNetwork().then((chainIdData) => {\n    console.log(chainIdData.chainId);\n});\n```\n\n### How to show a Web3Login button?\n\n```ts\n<Web3ConnectButton \n    className=\"my-class\" \n    connectLabel=\"Connect Web3 Wallet\" \n    disconnectLabel=\"Disconnect Web3 Wallet\"\n    connectingLabel=\"Connecting...\" \n/>\n```","metadata":{"loc":{"lines":{"from":41,"to":66}}}}],["166",{"pageContent":"### How to load a contract ABI?\n\n```ts\nconst abi = fetch(`https://eth.blockscout.com/api?module=contract&action=getabi&address=0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2`);\n\nif (!abi.ok) {\n    return \"Loading\";\n}\n\nconsole.log(abi.body.result);\n```","metadata":{"loc":{"lines":{"from":68,"to":78}}}}],["167",{"pageContent":"### How to load data from EVM nodes?\n\n```ts\n// create a contract interface\nconst iface = new ethers.utils.Interface(abi.body.result);\n\n// encode the balanceOf get request\nconst encodedBalanceData = iface.encodeFunctionData(\"balanceOf\", [receiver]);","metadata":{"loc":{"lines":{"from":80,"to":87}}}}],["168",{"pageContent":"// perform a call\nEthers.provider().call({\n    to: \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\",\n    data: encodedBalanceData,\n})\n.then((rawBalance) => {\n    // decode the result\n    const receiverBalanceHex = iface.decodeFunctionResult(\n        \"balanceOf\",\n        rawBalance\n    );\n    console.log(Big(receiverBalanceHex).toFixed());\n});\n```","metadata":{"loc":{"lines":{"from":89,"to":102}}}}],["169",{"pageContent":"### How to send a transaction to Ethereum nodes?\n\n```ts\n// create a contract instance\nconst wEthContract = new ethers.Contract(\n    \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\",\n    abi.body.result,\n    Ethers.provider().getSigner()\n);\n\n// perform a given method (withdraw in this case)\nwEthContract\n    .withdraw(balance, {\n        value: 0\n    })\n    .then((transactionHash) => {\n        console.log(transactionHash);\n    });\n```","metadata":{"loc":{"lines":{"from":104,"to":122}}}}],["170",{"pageContent":"### How to convert HEX values to human readable numbers?\n\n```ts\n// use Big().toFixed method\n\nBig(balanceHex).toFixed()\n```\n\n### How to locate the ABI of a Smart Contract?\n\nUtilize platforms like etherscan.com and blockscout.com, or delve into the project's GitHub repositories and documentation.","metadata":{"loc":{"lines":{"from":124,"to":134}}}}],["171",{"pageContent":"### Is there an example of applications with a description of how they were created? \n\nYes, there is an article that describes [best practices for creating applications for Ethereum developers on NEAR](bos-ethersjs-best-practices.md), with a breakdown of individual steps.","metadata":{"loc":{"lines":{"from":136,"to":138}}}}],["172",{"pageContent":"## Examples\n\nBelow is a curated list of NEAR components, developed by the community, that epitomize the best practices for creating NEAR components:","metadata":{"loc":{"lines":{"from":140,"to":142}}}}],["173",{"pageContent":"- [Unwrap ETH](https://near.org/near/widget/ComponentDetailsPage?src=zavodil.near/widget/unwrap-weth&tab=source)\n- [ERC-20 Token sender](https://near.org/near/widget/ComponentDetailsPage?src=zavodil.near/widget/erc20-sender&tab=source)\n- [Lido Component](https://near.org/near/widget/ComponentDetailsPage?src=zavodil.near/widget/Lido&tab=source)","metadata":{"loc":{"lines":{"from":144,"to":146}}}}],["174",{"pageContent":"- [Swap component](https://near.org/near/widget/ComponentDetailsPage?src=zavodil.near/widget/swap&tab=source) (a set of swap dApps for Ethereum Mainnet, Polygon Mainnet, Polygon zkevm, Aurora, NEAR, etc)\n- [1inch](https://near.org#/near/widget/ComponentDetailsPage?src=chanon.near/widget/1inch)\n- [Liquity](https://near.org/near/widget/ComponentDetailsPage?src=garlicfaucet.near/widget/liquityWidget)","metadata":{"loc":{"lines":{"from":147,"to":149}}}}],["175",{"pageContent":"---\nid: ethers-js-best-practices\ntitle: Best Practices for Ethereum developers on NEAR\n---\n\nimport {WidgetEditor} from \"@site/src/components/widget-editor\"\n\nIn this example, we will create an Ethereum dApp on NEAR that functions as a portfolio manager, displaying the current balances for a list of tokens. Additionally, we will display current market value of each asset in the portfolio.","metadata":{"loc":{"lines":{"from":1,"to":8}}}}],["176",{"pageContent":"We will be using several technologies:\n- NEAR Components for the user interface (UI).\n- [Ethers.js](bos-ethersjs.md) for retrieving balance data from the blockchain.\n- CoinGecko API for fetching static content with information about tokens and their current prices.\n- [Social-DB](../../social/contract.md) for storing the list of tokens to be tracked.\n- GitHub Actions for caching static content, speeding up loading, and circumventing rate limits.","metadata":{"loc":{"lines":{"from":10,"to":15}}}}],["177",{"pageContent":"## Step 1: Load balances from chain\n\nLet's start with a simple example and consider an application where we want to display a user's balances for multiple tokens.","metadata":{"loc":{"lines":{"from":17,"to":19}}}}],["178",{"pageContent":"### Source code\n\n```js\n// Load current sender address if it was not loaded yet\nif (state.sender == undefined && Ethers.provider()) {\n  Ethers.provider()\n    .send(\"eth_requestAccounts\", [])\n    .then((accounts) => {\n      if (accounts.length) {\n        // save sender address to the state\n        State.update({ sender: accounts[0] });\n      }\n    });\n}","metadata":{"loc":{"lines":{"from":21,"to":34}}}}],["179",{"pageContent":"// Load ERC20 ABI JSON\nconst erc20Abi = fetch(\n  \"https://ipfs.near.social/ipfs/bafkreifgw34kutqcnusv4yyv7gjscshc5jhrzw7up7pdabsuoxfhlnckrq\"\n);\nif (!erc20Abi.ok) {\n  return \"Loading\";\n}\n\n// Create contract interface\nconst iface = new ethers.utils.Interface(erc20Abi.body);\n\n// specify list of tokens\nconst tokens = [\n  \"0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599\", // WBTC\n  \"0x6b175474e89094c44da98b954eedeac495271d0f\", // DAI\n  \"0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\", // UNI\n];","metadata":{"loc":{"lines":{"from":36,"to":52}}}}],["180",{"pageContent":"// load receiver's balance for a giver token\nconst getTokenBalance = (receiver, tokenId) => {\n  // encode `balanceOf` request\n  const encodedData = iface.encodeFunctionData(\"balanceOf\", [receiver]);\n\n  // send request to the network\n  return Ethers.provider()\n    .call({\n      to: tokenId,\n      data: encodedData,\n    })\n    .then((rawBalance) => {\n      // decode response\n      const receiverBalanceHex = iface.decodeFunctionResult(\n        \"balanceOf\",\n        rawBalance\n      );","metadata":{"loc":{"lines":{"from":54,"to":70}}}}],["181",{"pageContent":"return Big(receiverBalanceHex).toFixed(0);\n    });\n};\n\nconst loadTokensData = () => {\n  // load balances of all tokens\n  tokens.map((tokenId) => {\n    getTokenBalance(state.sender, tokenId).then((value) => {\n      // save balance of every token to the state\n      State.update({ [tokenId]: { balance: value, ...state[tokenId] } });\n    });\n  });\n};\n\nconst renderToken = (tokenId) => (\n  <li>\n    {tokenId}: {state[tokenId].balance}\n  </li>\n);\n\nif (state.sender) {\n  loadTokensData();","metadata":{"loc":{"lines":{"from":72,"to":93}}}}],["182",{"pageContent":"return (\n    <>\n      <ul>{tokens.map((tokenId) => renderToken(tokenId))}</ul>\n      <p>Your account: {state.sender} </p>\n    </>\n  );\n} else {\n  // output connect button for anon user\n  return <Web3Connect />;\n}","metadata":{"loc":{"lines":{"from":95,"to":104}}}}],["183",{"pageContent":"```\n\nYou can see how it works here: [step_1](https://near.org/near/widget/ComponentDetailsPage?src=zavodil.near/widget/token-balances-step-1&tab=source).\n\nOnce the web3 connection is enabled, the output will appear as follows:\n\n```\n0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599: 726220\n0x6b175474e89094c44da98b954eedeac495271d0f: 140325040242585301886\n0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984: 127732731780832810","metadata":{"loc":{"lines":{"from":105,"to":114}}}}],["184",{"pageContent":"```\n\n:::tip\nWhen developing NEAR components, it's recommended to always present some content even if the user hasn't connected their wallet yet. In this example, the component uses the `<Web3Connect>` button to prompt the user to connect their wallet if they haven't already.\n:::","metadata":{"loc":{"lines":{"from":115,"to":119}}}}],["185",{"pageContent":"## Step 2: Load static data\n\n\nTo format the list, we must determine the decimal precision for each asset. While it's possible to retrieve this information from the ERC-20 contract for each token, it's important to note that the ERC-20 contract lacks certain valuable data such as the token icon and description. As a solution, we can leverage the CoinGecko API to retrieve token details, including the current market price.","metadata":{"loc":{"lines":{"from":121,"to":124}}}}],["186",{"pageContent":"Let's add a function to load token data for a given token from the Coingecko:\n\n```js\nconst loadCoingeckData = (tokenId) => {\n    let dataUrl = `https://api.coingecko.com/api/v3/coins/ethereum/contract/${tokenId}`;","metadata":{"loc":{"lines":{"from":126,"to":130}}}}],["187",{"pageContent":"const data = fetch(dataUrl);\n    if (data.ok) {\n        return {\n            name: data.body.name,\n            icon: data.body.image.small,\n            decimals: data.body.detail_platforms[\"ethereum\"].decimal_place,\n            price: Number(data.body.market_data.current_price.usd),\n        };\n    }\n};","metadata":{"loc":{"lines":{"from":132,"to":141}}}}],["188",{"pageContent":"```\n\nOther available API methods are listed in the [Coingecko API documentation](https://www.coingecko.com/en/api).\n\nNow that we have the data, let's modify the loadTokensData function to save the token information in the state:","metadata":{"loc":{"lines":{"from":142,"to":146}}}}],["189",{"pageContent":"```js\nconst loadTokensData = () => {\n  // load balances of all tokens\n  tokens.map((tokenId) => {\n    getTokenBalance(state.sender, tokenId).then((value) => {\n      // save balance of every token to the state\n      State.update({ [tokenId]: { balance: value, ...state[tokenId] } });\n    });\n  });","metadata":{"loc":{"lines":{"from":148,"to":156}}}}],["190",{"pageContent":"tokens.map((tokenId) => {\n    const tokenData = loadCoingeckData(tokenId);\n    // save balance of every token to the state\n    State.update({ [tokenId]: { ...tokenData, ...state[tokenId] } });\n  });\n};","metadata":{"loc":{"lines":{"from":158,"to":163}}}}],["191",{"pageContent":"```\n\nAnd lets update the `renderToken` function to display data we just got:","metadata":{"loc":{"lines":{"from":164,"to":166}}}}],["192",{"pageContent":"```js \nconst renderToken = (tokenId) => {\n  const tokenBalance = Big(state[tokenId].balance ?? 0)\n    .div(new Big(10).pow(state[tokenId].decimals ?? 1))\n    .toFixed(4);\n  const tokenBalanceUSD = (tokenBalance * state[tokenId].price).toFixed(2);\n  return (\n    <li>\n      {state[tokenId].name}: {tokenBalance}{\" \"}\n      <img src={state[tokenId].icon} width=\"16\" alt={state[tokenId].symbol} />\n      {`(${tokenBalanceUSD} USD)`}\n    </li>\n  );\n};","metadata":{"loc":{"lines":{"from":168,"to":181}}}}],["193",{"pageContent":"```\n\nYou can see how it works here: [step_2](https://near.org/near/widget/ComponentDetailsPage?src=zavodil.near/widget/token-balances-step-2&tab=source).\n\nOutput will be like this:\n```\nWrapped Bitcoin: 0.0073 wbtc (247.64 USD)\nDai: 140.3250 dai (140.21 USD)\nUniswap: 0.1277 uni (0.54 USD)","metadata":{"loc":{"lines":{"from":182,"to":190}}}}],["194",{"pageContent":"```\n\n:::info\nPlease note that the `fetch` function caches data and will be executed only once during loading.\n:::\n\n:::tip\nUtilize any available web-services to provide data for your application on NEAR, ensuring that the user experience is on par with traditional web 2.0 applications.\n:::","metadata":{"loc":{"lines":{"from":191,"to":199}}}}],["195",{"pageContent":"## Step 3. Save data in social-db\n\nNow, instead of hardcoding the list of tokens directly within the application code, let's transition them to an onchain data repository named social-db. This approach allows us to adjust the list of trackable tokens without having to modify the application's code. It also offers users the flexibility to select from pre-existing token lists or formulate their own.","metadata":{"loc":{"lines":{"from":201,"to":203}}}}],["196",{"pageContent":"Learn more about how [key-value storage social-db works](https://github.com/NearSocial/social-db/blob/master/README.md).\n\nHere is an example of a simple application for [setting tokens list in social-db](https://near.org/near/widget/ComponentDetailsPage?src=zavodil.near/widget/tokens-db&tab=source). \n\nIn this format, the data from the example will be stored in social-db.","metadata":{"loc":{"lines":{"from":205,"to":209}}}}],["197",{"pageContent":"```\n{\n\"0x6b175474e89094c44da98b954eedeac495271d0f\": \"\",\n\"0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599\": \"\",\n\"0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\": \"\"\n}","metadata":{"loc":{"lines":{"from":211,"to":216}}}}],["198",{"pageContent":"```\n\n\nViewing this data from the blockchain is accessible for every NEAR app or, for example, through an [Explorer app](https://near.org/zavodil.near/widget/Explorer?path=zavodil.near/tokens-db/**).\n\nLet's add a function to our application that will read the list of tokens.\n\n```js\n// set list of tokens\nif (!state.tokensLoaded) {\n    // load tokens list from the Social DB\n    const tokens = Social.get(`zavodil.near/tokens-db/*`, \"final\");","metadata":{"loc":{"lines":{"from":217,"to":228}}}}],["199",{"pageContent":"if (tokens) {\n        State.update({\n            tokensLoaded: true,\n            tokens,\n        });\n    }\n}\n\nconst tokens = Object.keys(state.tokens ?? {});\n```\n:::info\nIn this case, `zavodil.near` is the NEAR account of the user who created this list of tokens. Any other user can create their own list, and it will also be available in `social-db`.\n:::","metadata":{"loc":{"lines":{"from":230,"to":242}}}}],["200",{"pageContent":"You can see how it works here: [step_3](https://near.org/near/widget/ComponentDetailsPage?src=zavodil.near/widget/token-balances-step-3&tab=source). The output of the data in the application remains unchanged, but now it no longer contains hardcoded values.\n\n:::tip\nUse social-db, an on-chain data storage, to decouple the data and the application. \n:::","metadata":{"loc":{"lines":{"from":244,"to":248}}}}],["201",{"pageContent":"## Step 4. Caching Data Through GitHub Actions","metadata":{"loc":{"lines":{"from":250,"to":250}}}}],["202",{"pageContent":"Ethereum-based applications frequently depend on static content sources to present details about tokens or contracts. Often, frontends pull this data from platforms like CoinGecko or CoinMarketCap, leveraging API keys to enhance the data retrieval rate limit. Without these API keys, and given a significant volume of data, fetching from these platforms can be sluggish or even disrupted. We'll showcase a serverless approach utilizing GitHub Actions. This method preserves the decentralized nature","metadata":{"loc":{"lines":{"from":252,"to":252}}}}],["203",{"pageContent":"of NEAR gateways (where securely storing API keys isn't feasible), all while ensuring user ease-of-use and swift data loading.","metadata":{"loc":{"lines":{"from":252,"to":252}}}}],["204",{"pageContent":"Let's create a Node.js application that will iterate through a list of tokens from `social-db` and display the retrieved data along with a timestamp of the operation.\n\n```js\nimport * as nearAPI from \"near-api-js\";\nimport * as cg from \"coingecko-api-v3\";\n\nconst CONTRACT_ID = \"social.near\";\nconst ETHEREUM_NETWORK_ID = \"ethereum\";\nconst FETCH_TIMEOUT = 7000;","metadata":{"loc":{"lines":{"from":254,"to":262}}}}],["205",{"pageContent":"async function connect() {\n    const config = {\n        networkId: \"mainnet\",\n        keyStore: new nearAPI.keyStores.InMemoryKeyStore(),\n        nodeUrl: \"https://rpc.mainnet.near.org\",\n        walletUrl: \"https://wallet.mainnet.near.org\",\n        helperUrl: \"https://helper.mainnet.near.org\",\n        explorerUrl: \"https://nearblocks.io\",\n    };\n    const near = await nearAPI.connect(config);\n    const account = await near.account(CONTRACT_ID);","metadata":{"loc":{"lines":{"from":264,"to":274}}}}],["206",{"pageContent":"const contract = new nearAPI.Contract(\n        account, // the account object that is connecting\n        CONTRACT_ID, // name of contract you're connecting to\n        {\n            viewMethods: [\"get\"], // view methods do not change state but usually return a value\n            changeMethods: [], // change methods modify state\n            sender: account, // account object to initialize and sign transactions.\n        }\n    );\n\n    return contract;\n}","metadata":{"loc":{"lines":{"from":276,"to":287}}}}],["207",{"pageContent":"// load data from the social-db\nconst contract = await connect();\nconst data = await contract.get({ keys: [\"zavodil.near/tokens-db/*\"] });\nconst tokens = data[\"zavodil.near\"][\"tokens-db\"];\n\n// init coingecko client\nconst client = new cg.CoinGeckoClient({\n    timeout: 5000,\n    autoRetry: false,\n});\n\nlet res = {};\nfor (let i = 0; i < Object.keys(tokens).length; i++) {\n    const tokenId = Object.keys(tokens)[i];","metadata":{"loc":{"lines":{"from":289,"to":302}}}}],["208",{"pageContent":"try {\n        // load data from coingecko\n        const data = await client.contract({\n            id: ETHEREUM_NETWORK_ID,\n            contract_address: tokenId,\n        });\n        // format output\n        const tokenData = {\n            name: data[\"name\"],\n            symbol: data[\"symbol\"],\n            icon: data[\"image\"]?.[\"thumb\"],\n            decimals: data[\"detail_platforms\"]?.[ETHEREUM_NETWORK_ID]?.[\"decimal_place\"],","metadata":{"loc":{"lines":{"from":304,"to":315}}}}],["209",{"pageContent":"price: data[\"market_data\"]?.[\"current_price\"]?.[\"usd\"],\n        };\n        // store output\n        res[tokenId] = tokenData;","metadata":{"loc":{"lines":{"from":316,"to":319}}}}],["210",{"pageContent":"// add timeout to avoid rate limits\n        await new Promise((resolve) => {\n            setTimeout(resolve, FETCH_TIMEOUT);\n        });\n    } catch (ex) {\n        console.error(tokenId, ex)\n    }\n}\n\n// output results\nconsole.log(\n    JSON.stringify({\n        timestamp: Date.now(),\n        data: res,\n    })\n);","metadata":{"loc":{"lines":{"from":321,"to":336}}}}],["211",{"pageContent":"```\n\nExample [of this code on a github](https://github.com/zavodil/tokens-db/),  you can clone the repository and modify the data retrieval request as needed.\n\nNow, we can create a GitHub worker that will execute this script and save the data to a file named `tokens-db.json`. Here are the instructions for the worker:\n\n```yml\nname: Tokens Data Updater\non:\n  workflow_dispatch:\n  schedule:\n    - cron:  '*/15 * * * *'","metadata":{"loc":{"lines":{"from":338,"to":349}}}}],["212",{"pageContent":"jobs:\n  updateStats:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Prepare        \n        uses: actions/setup-node@v3\n        with:\n            node-version: 16\n      - run: npm i      \n      - name: Tokens Data\n        run: node load > tokens-db.json              \n        env:\n          EXPORT_MODE: CS\n      - uses: EndBug/add-and-commit@v9 \n        with: \n          author_name: \"Tokens Data Updater\"\n          add: 'tokens-db.json --force'","metadata":{"loc":{"lines":{"from":351,"to":368}}}}],["213",{"pageContent":"message: \"Tokens Data fetching\"","metadata":{"loc":{"lines":{"from":369,"to":369}}}}],["214",{"pageContent":"```\n\nDon't forget to grant the worker the necessary permissions to add files to your repository (Open GitHub Repository: Settings->Actions->General)\n\nThe output of this worker will be the [tokens-db.json](https://raw.githubusercontent.com/zavodil/tokens-db/main/tokens-db.json) file which will be regularly updated with current data. You can easily add any private API keys required for bypassing rate limits in the worker.","metadata":{"loc":{"lines":{"from":370,"to":374}}}}],["215",{"pageContent":"Now, let's get back to the NEAR application. We need to modify the code to read data from the cached file created by GitHub Actions instead of fetching it from CoinGecko every time.\n\nTo do this, we'll make changes to the `loadTokensData` function:","metadata":{"loc":{"lines":{"from":376,"to":378}}}}],["216",{"pageContent":"```js\nconst loadTokensData = () => {\n    let cacheTokenData = {};\n    // load data generated by github action\n    const cachedData = fetch(\n        `https://raw.githubusercontent.com/zavodil/tokens-db/main/tokens-db.json`\n    );\n    if (cachedData.ok) {\n        const cache = JSON.parse(cachedData.body);\n        const cacheDate = new Date(cache.timestamp);\n        const timeDifference = Date.now() - cacheDate.getTime();","metadata":{"loc":{"lines":{"from":380,"to":390}}}}],["217",{"pageContent":"if (timeDifference <= 30 * 60 * 1000) {  // use cached data if it is not outdated (30 min)\n            cacheTokenData = cache.data;\n        }","metadata":{"loc":{"lines":{"from":391,"to":393}}}}],["218",{"pageContent":"tokens.map((tokenId) => {\n            const tokenData = cacheTokenData.hasOwnProperty(tokenId)\n                ? cacheTokenData?.[tokenId]\n                : // load data from coingecko if we don't have cached data only\n                loadCoingeckData(tokenId);\n            // save balance of every token to the state\n            State.update({ [tokenId]: { ...tokenData, ...state[tokenId] } });\n        });\n    }\n};","metadata":{"loc":{"lines":{"from":395,"to":404}}}}],["219",{"pageContent":"```\n\nYou can see how it works here: [step_4](https://near.org/near/widget/ComponentDetailsPage?src=zavodil.near/widget/token-balances-step-4&tab=source). The output of the data in the application remains the same, but now it operates more efficiently.\n\n:::tip\nUse GitHub Actions as a serverless backend for securing API keys, caching data etc. \n:::","metadata":{"loc":{"lines":{"from":406,"to":412}}}}],["220",{"pageContent":"---\nid: near\ntitle: Interacting with Near\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport {WidgetEditor} from \"@site/src/components/widget-editor\"\n\nThe components can use the `Near` object to interact with smart contracts in the NEAR blockchain. There are three methods:\n\n- [`Near.view`](#nearview)\n- [`Near.block`](#nearblock)\n- [`Near.call`](#nearcall)\n\n---","metadata":{"loc":{"lines":{"from":1,"to":16}}}}],["221",{"pageContent":"## Near.view\nQueries a read-only method from a NEAR smart contract, returning:\n- **`null`**: If the query is still being processed\n- **`undefined`**: If the query is complete and no value was returned by the contract\n- A **value**: If the query is complete and a value was returned by the contract\n\n<WidgetEditor>\n\n```js\nconst greeting = Near.view(\"hello.near-examples.testnet\", \"get_greeting\", {});\n\nif (greeting === null) return \"Loading...\";\n\nreturn `The contract says: ${greeting}`;","metadata":{"loc":{"lines":{"from":18,"to":31}}}}],["222",{"pageContent":"```\n\n</WidgetEditor>\n\n<details markdown=\"1\">\n<summary> Parameters </summary>","metadata":{"loc":{"lines":{"from":32,"to":37}}}}],["223",{"pageContent":"| param              | required     | type            | description                                                                                                                    |\n|--------------------|--------------|-----------------|--------------------------------------------------------------------------------------------------------------------------------|","metadata":{"loc":{"lines":{"from":39,"to":40}}}}],["224",{"pageContent":"| `contractName`     | **required** | string          | Name of the smart contract                                                                                                     |\n| `methodName`       | **required** | string          | Name of the method to call                                                                                                     |","metadata":{"loc":{"lines":{"from":41,"to":42}}}}],["225",{"pageContent":"| `args`             | _optional_   | object instance | Arguments to pass to the method                                                                                                |\n| `blockId/finality` | _optional_   | string          | Block ID or finality of the transaction                                                                                        |","metadata":{"loc":{"lines":{"from":43,"to":44}}}}],["226",{"pageContent":"| `subscribe`        | _optional_   | boolean         | This feature allows users to subscribe to a query, which automatically refreshes the data for all subscribers every 5 seconds. |","metadata":{"loc":{"lines":{"from":45,"to":45}}}}],["227",{"pageContent":"</details>\n\n:::tip\nNotice that the optional parameter `subscribe` allows users to subscribe to a query, which automatically refreshes the data every 5 seconds.\n:::\n\n<hr className=\"subsection\" />","metadata":{"loc":{"lines":{"from":47,"to":53}}}}],["228",{"pageContent":"#### Avoiding a Common Pitfall\n\nIf you want to initialize the state with the result of a `Near.view` call, be sure to check first that the value was obtained, to avoid initializing the state with `null`.\n\n<WidgetEditor>\n\n```js\nconst contractGreet = Near.view(\"hello.near-examples.testnet\", \"get_greeting\", {});\n\n// you need to first check that the value was obtained\nif (contractGreet === null) return \"Loading...\";\n\nconst [greeting, setGreeting] = useState(contractGreet);","metadata":{"loc":{"lines":{"from":55,"to":67}}}}],["229",{"pageContent":"return `The contract says: ${greeting}`;","metadata":{"loc":{"lines":{"from":69,"to":69}}}}],["230",{"pageContent":"```\n\n</WidgetEditor>\n\nIf you don't want to delay the render of your component, you can also use the `useEffect` hook to control the value returned by `Near.view`\n\n<WidgetEditor>\n\n```js\nconst contractGreet = Near.view('hello.near-examples.testnet', 'get_greeting');\n\nconst [greeting, setGreeting] = useState('Loading ...');\n\nuseEffect(() => {\n  if (contractGreet !== null) setGreeting(contractGreet);\n}, [contractGreet]);\n\nreturn `The contract says: ${greeting}`;\n```\n\n</WidgetEditor>\n\n---","metadata":{"loc":{"lines":{"from":70,"to":92}}}}],["231",{"pageContent":"## Near.call\n\nCalls a smart contract method from the blockchain. Since a transaction needs to be signed, the user must be logged in in order to make the call.\n\n<WidgetEditor>\n\n```js\nif (!context.accountId) return \"Please login...\";\n\nconst onClick = () => {\n  Near.call(\n    \"hello.near-examples.testnet\",\n    \"set_greeting\",\n    { greeting: \"Hello!\" }\n  );\n};\n\nreturn <>\n  <h5> Hello {context.accountId} </h5>\n  <button onClick={onClick}> Set Greeting </button>\n</>;\n```\n</WidgetEditor>","metadata":{"loc":{"lines":{"from":94,"to":116}}}}],["232",{"pageContent":"<details markdown=\"1\">\n<summary> Parameters </summary>","metadata":{"loc":{"lines":{"from":118,"to":119}}}}],["233",{"pageContent":"| param          | required     | type            | description                                                                 |\n|----------------|--------------|-----------------|-----------------------------------------------------------------------------|\n| `contractName` | **required** | string          | Name of the smart contract to call                                          |","metadata":{"loc":{"lines":{"from":121,"to":123}}}}],["234",{"pageContent":"| `methodName`   | **required** | string          | Name of the method to call on the smart contract                            |\n| `args`         | _optional_   | object instance | Arguments to pass to the smart contract method as an object instance        |\n| `gas`          | _optional_   | string / number | Maximum amount of gas to be used for the transaction (default 300Tg)        |","metadata":{"loc":{"lines":{"from":124,"to":126}}}}],["235",{"pageContent":"| `deposit`      | _optional_   | string / number | Amount of NEAR tokens to attach to the call as deposit (in yoctoNEAR units) |","metadata":{"loc":{"lines":{"from":127,"to":127}}}}],["236",{"pageContent":"</details>\n\n:::tip\nRemember that you can login using the `Login` button at the navigation bar.\n:::\n\n---","metadata":{"loc":{"lines":{"from":129,"to":135}}}}],["237",{"pageContent":"## Near.block\n\nQueries a block from the blockchain.\n\n<WidgetEditor height=\"40px\">\n\n```js\nreturn Near.block(\"optimistic\");","metadata":{"loc":{"lines":{"from":137,"to":144}}}}],["238",{"pageContent":"```\n\n</WidgetEditor>\n\n<details markdown=\"1\">\n<summary> Parameters </summary>","metadata":{"loc":{"lines":{"from":145,"to":150}}}}],["239",{"pageContent":"| param                   | required   | type | description                                                                                                                                       |\n|-------------------------|------------|------|---------------------------------------------------------------------------------------------------------------------------------------------------|","metadata":{"loc":{"lines":{"from":152,"to":153}}}}],["240",{"pageContent":"| `blockHeightOrFinality` | _optional_ | any  | The block height or finality level to use for the blockchain query (desired block height, or one of the following strings: `optimistic`, `final`) |","metadata":{"loc":{"lines":{"from":154,"to":154}}}}],["241",{"pageContent":"- desired block height: The height of the specific block to query, expressed as a positive integer\n- `optimistic`: Uses the latest block recorded on the node that responded to your query (< 1 second delay)\n- `final`: a block that has been validated on at least 66% of the nodes in the network (approx. 2s)\n\n</details>","metadata":{"loc":{"lines":{"from":156,"to":160}}}}],["242",{"pageContent":"---\nid: builtin-components\ntitle: List of Native Components\n---\n\nimport {WidgetEditor} from \"@site/src/components/widget-editor\"\n\nA list of all the built-in components to be used on Near Components.\n\n---","metadata":{"loc":{"lines":{"from":1,"to":10}}}}],["243",{"pageContent":"## Widget\n\nThe predefined component `Widget` allows you to include an existing component into your code, thus enabling to create complex applications by composing components.\n\n<WidgetEditor id='1' height=\"100px\">\n\n```ts\nconst props = { name: \"Anna\", amount: 3 };\n\nreturn <Widget src=\"influencer.testnet/widget/Greeter\" props={props} />;\n```\n\n</WidgetEditor>\n\n---","metadata":{"loc":{"lines":{"from":12,"to":26}}}}],["244",{"pageContent":"## IpfsImageUpload\n\nA built-in component that enables users to directly upload an image to the InterPlanetary File System (IPFS).\n\n<WidgetEditor id='2' height=\"200px\">\n\n```js\nState.init({image: {}})\n\nreturn <>\n  <p> Raw State: {JSON.stringify(state.image)} </p>\n  <IpfsImageUpload image={state.image} />\n</>\n```\n\n</WidgetEditor>\n\n---","metadata":{"loc":{"lines":{"from":28,"to":45}}}}],["245",{"pageContent":"## Files\n\nA built-in component that enables to input files with drag and drop support. Read more about the `Files` component [here](https://www.npmjs.com/package/react-files).\n\n<WidgetEditor id='3' height=\"220px\">\n\n```js\nconst [img, setImg] = useState(null);\nconst [msg, setMsg] = useState('Upload an Image')\n\nconst uploadFile = (files) => {\n  setMsg('Uploading...')","metadata":{"loc":{"lines":{"from":47,"to":58}}}}],["246",{"pageContent":"const file = fetch(\n    \"https://ipfs.near.social/add\",\n    {\n      method: \"POST\",\n      headers: { Accept: \"application/json\" },\n      body: files[0]\n    }\n  )\n\n  setImg(file.body.cid)\n  setMsg('Upload an Image')\n}\n\nreturn <>\n  <Files\n    multiple={false}\n    accepts={[\"image/*\"]}\n    clickable\n    className=\"btn btn-outline-primary\"\n    onChange={uploadFile}\n  >\n    {msg}\n  </Files>\n  {img ? <div><img src={`https://ipfs.near.social/ipfs/${img}`} /></div> : ''}\n</>;","metadata":{"loc":{"lines":{"from":60,"to":84}}}}],["247",{"pageContent":"```\n\n</WidgetEditor>\n\n---","metadata":{"loc":{"lines":{"from":85,"to":89}}}}],["248",{"pageContent":"## Markdown\n\nA component that enables to render Markdown.\n\n<WidgetEditor id='4' height=\"60px\">\n\n```jsx\nconst markdown = (`","metadata":{"loc":{"lines":{"from":91,"to":98}}}}],["249",{"pageContent":"## A title\n\nThis is some example **markdown** content, with _styled_ text\n`)\n\nreturn <Markdown text={markdown} />;\n```\n\n</WidgetEditor>\n\n:::tip Markdown Editor\n\nCheckout this [Markdown Editor](https://near.social/#/mob.near/widget/MarkdownEditorIframeExample), and [its source code](https://near.social/mob.near/widget/WidgetSource?src=mob.near/widget/MarkdownEditorIframeExample).\n:::\n\n---","metadata":{"loc":{"lines":{"from":99,"to":114}}}}],["250",{"pageContent":"## OverlayTrigger\n\nUsed to display a message or icon when the mouse is over a DOM element.\n\n<WidgetEditor id='5' height=\"200px\">\n\n```javascript\nconst [show, setShow] = useState(false);\n\nconst overlay = (\n  <div className='border m-3 p-3'>\n    This is the overlay Message\n  </div>\n);","metadata":{"loc":{"lines":{"from":116,"to":129}}}}],["251",{"pageContent":"return (\n  <OverlayTrigger\n    show={show}\n    delay={{ show: 250, hide: 300 }}\n    placement='auto'\n    overlay={overlay}\n  >\n    <button\n      className=\"btn btn-outline-primary\"\n      onMouseEnter={() => setShow(true)}\n      onMouseLeave={() => setShow(false)}\n    >\n      Place Mouse Over Me\n    </button>\n  </OverlayTrigger>\n);","metadata":{"loc":{"lines":{"from":131,"to":146}}}}],["252",{"pageContent":"```\n\n</WidgetEditor>\n\n<details markdown=\"1\">\n\n<summary> Component props </summary>\n\nThe OverlayTrigger component has several props that allow you to customize its behavior:","metadata":{"loc":{"lines":{"from":147,"to":155}}}}],["253",{"pageContent":"| Prop        | Description                                                                                                                                                                                                                                                                  |","metadata":{"loc":{"lines":{"from":157,"to":157}}}}],["254",{"pageContent":"|-------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|","metadata":{"loc":{"lines":{"from":158,"to":158}}}}],["255",{"pageContent":"| `show`      | A boolean value that determines whether the overlay is currently visible or not.                                                                                                                                                                                             |","metadata":{"loc":{"lines":{"from":159,"to":159}}}}],["256",{"pageContent":"| `trigger`   | An array of events that trigger the display of the overlay. In this example, the `trigger` prop is set to `[\"hover\", \"focus\"]`, which means that the overlay will be displayed when the user hovers over or focuses on the element.                                          |","metadata":{"loc":{"lines":{"from":160,"to":160}}}}],["257",{"pageContent":"| `delay`     | An object that specifies the delay before the overlay is displayed or hidden. In this example, the `delay` prop is set to `{ show: 250, hide: 300 }`, which means that the overlay will be displayed after a 250-millisecond delay and hidden after a 300-millisecond delay. |","metadata":{"loc":{"lines":{"from":161,"to":161}}}}],["258",{"pageContent":"| `placement` | A string that specifies the position of the overlay relative to the trigger element. In this example, the `placement` prop is set to `\"auto\"`, which means that the position will be automatically determined based on available space.                                      |","metadata":{"loc":{"lines":{"from":162,"to":162}}}}],["259",{"pageContent":"| `overlay`   | The content that will be displayed in the overlay. In this example, the `overlay` prop is set to a `<div>` element containing the message \"This is the overlay message.                                                                                                      |\n</details>","metadata":{"loc":{"lines":{"from":163,"to":164}}}}],["260",{"pageContent":"---","metadata":{"loc":{"lines":{"from":166,"to":166}}}}],["261",{"pageContent":"## InfiniteScroll\n\nInfinitely load a grid or list of items. This component allows you to create a simple, lightweight infinite scrolling page or element by supporting both window and scrollable elements.\n\nRead more about the [react-infinite-scroller](https://www.npmjs.com/package/react-infinite-scroller) package.\n\n<WidgetEditor id='6' height=\"200px\">","metadata":{"loc":{"lines":{"from":168,"to":174}}}}],["262",{"pageContent":"```js\nconst allNumbers = Array.from(Array(100).keys())\nconst [lastNumber, setLastNumber] = useState(0);\nconst [display, setDisplay] = useState([]);\n\nconst loadNumbers = (page) => {\n  const toDisplay = allNumbers\n    .slice(0, lastNumber + page*10)\n    .map(n => <p>{n}</p>)\n\n  console.log(lastNumber + page*10)\n  setDisplay(toDisplay);\n  setLastNumber(lastNumber + page*10);\n};","metadata":{"loc":{"lines":{"from":176,"to":189}}}}],["263",{"pageContent":"return (\n  <InfiniteScroll\n    loadMore={loadNumbers}\n    hasMore={lastNumber < allNumbers.length}\n    useWindow={false}\n  >\n    {display}\n  </InfiniteScroll>\n);","metadata":{"loc":{"lines":{"from":191,"to":199}}}}],["264",{"pageContent":"```\n\n</WidgetEditor>\n\n---","metadata":{"loc":{"lines":{"from":200,"to":204}}}}],["265",{"pageContent":"## TypeAhead\n\nProvides a type-ahead input field for selecting an option from a list of choices. More information about the component can be found [here](https://github.com/ericgio/react-bootstrap-typeahead).\n\n<WidgetEditor id='7' height=\"300px\">\n\n```jsx\nconst [selected, setSelected] = useState([]);\nconst options = [\"Apple\", \"Banana\", \"Cherry\", \"Durian\", \"Elderberry\"];","metadata":{"loc":{"lines":{"from":206,"to":214}}}}],["266",{"pageContent":"return <>\n  <Typeahead\n    options={options}\n    multiple\n    onChange={v => setSelected(v)}\n    placeholder='Choose a fruit...'\n  />\n  <hr />\n  <p> Selected: {selected.join(', ')} </p>\n</>;","metadata":{"loc":{"lines":{"from":216,"to":225}}}}],["267",{"pageContent":"```\n\n</WidgetEditor>\n\n---","metadata":{"loc":{"lines":{"from":226,"to":230}}}}],["268",{"pageContent":"## Styled Components\n\n[Styled Components](https://styled-components.com/) is a popular library for styling React components using CSS-in-JS.\n\n<WidgetEditor id='8' height=\"80px\">\n\n```jsx\nconst Button = styled.button`\n  /* Adapt the colors based on primary prop */\n  background: ${(props) => (props.primary ? \"palevioletred\" : \"white\")};\n  color: ${(props) => (props.primary ? \"white\" : \"palevioletred\")};","metadata":{"loc":{"lines":{"from":232,"to":242}}}}],["269",{"pageContent":"font-size: 1em;\n  margin: 1em;\n  padding: 0.25em 1em;\n  border: 2px solid palevioletred;\n  border-radius: 10px;\n`;\n\nreturn (\n  <div>\n    <Button>Normal</Button>\n    <Button primary>Primary</Button>\n  </div>\n);","metadata":{"loc":{"lines":{"from":244,"to":256}}}}],["270",{"pageContent":"```\n\n</WidgetEditor>\n\n---","metadata":{"loc":{"lines":{"from":257,"to":261}}}}],["271",{"pageContent":"## Tooltip\n\nDisplays a message once the mouse hovers over a particular item. This component was imported from [`React-Bootstrap`](https://react-bootstrap-v3.netlify.app/components/tooltips/).\n\n<WidgetEditor id='9' height=\"120px\">\n\n```js\nconst tooltip = (\n  <Tooltip id=\"tooltip\">\n    <strong>Holy guacamole!</strong> Check this info.\n  </Tooltip>\n);\n\nreturn <>\n  <OverlayTrigger placement=\"left\" overlay={tooltip}>\n    <button>Holy guacamole!</button>\n  </OverlayTrigger>","metadata":{"loc":{"lines":{"from":263,"to":279}}}}],["272",{"pageContent":"<OverlayTrigger placement=\"top\" overlay={tooltip}>\n    <button>Holy guacamole!</button>\n  </OverlayTrigger>\n\n  <OverlayTrigger placement=\"bottom\" overlay={tooltip}>\n    <button>Holy guacamole!</button>\n  </OverlayTrigger>\n\n  <OverlayTrigger placement=\"right\" overlay={tooltip}>\n    <button>Holy guacamole!</button>\n  </OverlayTrigger>\n</>","metadata":{"loc":{"lines":{"from":281,"to":292}}}}],["273",{"pageContent":"```\n\n</WidgetEditor>","metadata":{"loc":{"lines":{"from":293,"to":295}}}}],["274",{"pageContent":"---\nid: notifications\ntitle: Social Notifications\n---\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport {WidgetEditor} from \"@site/src/components/widget-editor\"\n\nApplications such as [NEAR Social](https://near.social) and the [NEAR Dev Portal](https://dev.near.org/) allow components to send notifications to their users.","metadata":{"loc":{"lines":{"from":1,"to":9}}}}],["275",{"pageContent":"Notifications are great to inform users in real time that something has happened, and can be [easily incorporated into any web app](../tutorial/push-notifications.md).\n\n---","metadata":{"loc":{"lines":{"from":11,"to":13}}}}],["276",{"pageContent":"## Sending Notifications \n\nNotifications are implemented as a particular case of [indexed actions](./social.md#socialindex).\n\nThis means that to send a notification we just need to `index` the `notify` action for the indexer, with a `key` and a `value`.\n\n- The `key` tells **which account** to notify.\n- The `value` includes the [notification type](#notification-types) and the item being notified of.\n\n<WidgetEditor>","metadata":{"loc":{"lines":{"from":15,"to":24}}}}],["277",{"pageContent":"```js\nconst notifyMe = () => {\n  Social.set({\n    index: {\n      notify: JSON.stringify({\n        key: context.accountId,\n        value: \"docs notification\"\n      })\n    }\n  });\n}\n\nreturn <>\n  {context.accountId?\n  <button onClick={notifyMe}> Get Notification </button>\n  :\n  <p> Please login to be notified</p>\n  }\n</>","metadata":{"loc":{"lines":{"from":26,"to":44}}}}],["278",{"pageContent":"```\n\n</WidgetEditor>\n\n\nIn this example, the account executing the code is notifying `mob.near` that they liked their social post created at the block height `102169725`.\n\n---","metadata":{"loc":{"lines":{"from":45,"to":52}}}}],["279",{"pageContent":"## Notification Types\n\nSince notifications are indexed actions, anyone can create their own kind of notification.\n\nWhile there is no standard for notifications, we recommend using the following types:\n\n<Tabs>\n  <TabItem value=\"Custom\" default>","metadata":{"loc":{"lines":{"from":54,"to":61}}}}],["280",{"pageContent":"```js\n  Social.set({\n    index: JSON.stringify({\n      notify: {\n        key: \"mob.near\",\n        value: {\n          type: \"custom\",\n          message: \"A message in the notification\",\n          widget: \"The widget to open when clicking on the notification\",\n          params: { parameters: \"to pass to the widget\", ... },\n        },\n      }\n    })\n  });","metadata":{"loc":{"lines":{"from":63,"to":76}}}}],["281",{"pageContent":"```\n\n  **Note**: currently, only near.org implements custom notifications\n\n  </TabItem>\n\n  <TabItem value=\"Like\">\n\n  ```js\n  Social.set({\n    index: JSON.stringify({\n      notify: {\n        key: \"mob.near\",\n        value: {\n          type: \"like\",\n          item: {\n            type: \"social\",\n            path: \"mob.near/post/main\",\n            blockHeight: 102169725\n          }\n        }\n      }\n    })\n  })","metadata":{"loc":{"lines":{"from":77,"to":100}}}}],["282",{"pageContent":"```\n\n  **Reference**: [LikeButton](https://near.org/near/widget/ComponentDetailsPage?src=near/widget/LikeButton&tab=source)\n\n  </TabItem>\n  <TabItem value=\"Comment\">\n\n  ```js\n  Social.set({\n    index: JSON.stringify({\n      notify: {\n        key: \"nearhacks.near\",\n        value: {\n          type: \"comment\",\n          item: {\n            type: \"social\",\n            path: \"nearhacks.near/post/main\",\n            blockHeight: 102224773\n          }\n        }\n      }\n    })\n  })","metadata":{"loc":{"lines":{"from":101,"to":123}}}}],["283",{"pageContent":"```\n\n  **Reference**: [CommentButton](https://near.org/near/widget/ComponentDetailsPage?src=near/widget/Comments.Compose&tab=source)\n\n  </TabItem>\n    <TabItem value=\"Follow\">\n\n  ```js\n  Social.set({\n    index: JSON.stringify({\n      notify: {\n        key: \"mob.near\",\n        value: {\n          type: \"follow\",\n        }\n      }\n    })\n  })","metadata":{"loc":{"lines":{"from":124,"to":141}}}}],["284",{"pageContent":"```\n\n  **Reference**: [FollowButton](https://near.org/near/widget/ComponentDetailsPage?src=near/widget/FollowButton&tab=source)\n\n  </TabItem>\n\n</Tabs>\n\n:::caution\nThere is no standard for notifications, but you can contribute to create one [in this public discussion](https://github.com/NearSocial/standards/pull/19/files).\n:::\n\n---","metadata":{"loc":{"lines":{"from":142,"to":154}}}}],["285",{"pageContent":"## Parsing Notifications\n\nIn order to get all notifications for an user, we make a call to the Social indexer.\n\n<WidgetEditor id='1' height=\"190px\">\n\n```js\n// login to see your notifications\nconst accountId = context.accountId || 'influencer.testnet'\n\nconst index = Social.index(\"notify\", accountId, {limit: 2, order: \"desc\", subscribe: true});\n\nreturn <>\n  <h4> Notifications for {accountId} </h4>\n  {index.map(e => <> {JSON.stringify(e, null, 2)} <br/></>) }\n</>","metadata":{"loc":{"lines":{"from":156,"to":171}}}}],["286",{"pageContent":"```\n\n</WidgetEditor>\n\n:::caution\nPlease notice that anyone can create a notification for the user, and thus some form of filtering might be needed.\n:::\n\n:::tip\nYou can also check how the [Notifications Page](https://near.org/near/widget/ComponentDetailsPage?src=near/widget/NotificationsPage&tab=source) is implemented.\n:::","metadata":{"loc":{"lines":{"from":172,"to":182}}}}],["287",{"pageContent":"---\nid: primitives\ntitle: Primitives API\nsidebar_label: Primitives\n---\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\nNear Social VM provides a set of custom APIs that can be used by the components.\n\nStandard objects:\n- `JSON` - the JSON API.\n- `Object` - the Object API.\n- `Date`\n- `console` - the console API.\n- `Math` \n- `Array`\n- `Number`\n- `Buffer`\n- `Audio`\n- `Image`\n- `File`\n- `Blob`\n- `FileReader`\n- `URL`\n- `Uint8Array`\n- `Map`\n- `Set`","metadata":{"loc":{"lines":{"from":1,"to":28}}}}],["288",{"pageContent":"Imported objects:\n- `Big` - the big number API from the `big.js` library.\n- `BN` - the big number API from the `bn.js` library.","metadata":{"loc":{"lines":{"from":30,"to":32}}}}],["289",{"pageContent":"---\nid: social\ntitle: Social Interactions\n---\n\nimport {WidgetEditor} from \"@site/src/components/widget-editor\"\n\nNEAR components can natively communicate with the [SocialDB smart contract](https://github.com/NearSocial/social-db) (currently deployed at [social.near](https://nearblocks.io/address/social.near)).\n\nThe `SocialDB` is a contract that stores `key-value` pairs, and is used mostly to store social-related data, such as `posts`, `likes`, or `profiles`.","metadata":{"loc":{"lines":{"from":1,"to":10}}}}],["290",{"pageContent":":::tip\nBesides user data, the `SocialDB` contract stores **all existing NEAR components**.\n:::\n\n---","metadata":{"loc":{"lines":{"from":12,"to":16}}}}],["291",{"pageContent":"## Social.get\n\n`Social.get` queries a key from the SocialDB contract and returns the data. The key being queried can contain wildcards.\n\nFor example:\n\n  - `alice.near/profile/**`  will match the entire profile data of account alice.near.\n  - `alice.near/profile/*` will match all the fields of the profile, but not the nested objects.\n  - `alice.near/profile/name` will match only the name field of the profile.\n  - `*/widget/*` will match all the widgets of all the accounts.\n\n<br />","metadata":{"loc":{"lines":{"from":18,"to":29}}}}],["292",{"pageContent":"<WidgetEditor>\n\n```js\n// Ask for the `profile` key of the influencer.testnet account\nconst profile = Social.get(\"influencer.testnet/profile/*\");\n\n// Ask a component from the influencer.testnet account\nconst widget = Social.get(\"influencer.testnet/widget/Greeter\");\n\nif(profile === null || widget === null) return \"Loading ...\"\n\nreturn (\n  <div>\n    <p>Profile: {JSON.stringify(profile)}</p>\n    <p>Widgets: {JSON.stringify(widget)} </p>\n  </div>\n);","metadata":{"loc":{"lines":{"from":31,"to":47}}}}],["293",{"pageContent":"```\n\n</WidgetEditor>\n\n\n<details markdown=\"1\">\n<summary> Parameters </summary>\n\n| param      | required     | type               | description                  |\n|------------|--------------|--------------------|------------------------------|\n| `patterns` | **required** | string / string[]  | the path pattern(s)          |\n| `finality` | _optional_   | `\"final\"` / number | the block height or finality |\n| `options`  | _optional_   | object             | the `options` object.        |","metadata":{"loc":{"lines":{"from":48,"to":60}}}}],["294",{"pageContent":":::info options object\n\n- `subscribe` _(optional)_: if true, the data will be refreshed every 5 seconds.\n- `return_deleted` _(optional)_: whether to return deleted values (as `null`). Default is `false`.\n\n:::\n\nThe block height or finality can be used to get the data at a specific block height or finality.\nIf the block height or finality is not specified, the data will be fetched at the `optimistic` finality (the latest block height).","metadata":{"loc":{"lines":{"from":62,"to":70}}}}],["295",{"pageContent":"For block height and finality `final`, instead of calling the NEAR RPC directly, the VM uses the Social API Server to fetch the data.\n\nSocial API server indexes the data for SocialDB and allows to fetch the data at any block height with additional options.\n\nIt also allows returning more data than an RPC call because it's not restricted by the gas limit.\nIn general, the API server also serves data faster than the NEAR RPC, because it doesn't execute the contract code in a virtual machine.","metadata":{"loc":{"lines":{"from":72,"to":77}}}}],["296",{"pageContent":"</details>\n\n:::tip\nWhile the data is fetching, `Social.get` returns `null`.\n:::\n\n\n---","metadata":{"loc":{"lines":{"from":79,"to":86}}}}],["297",{"pageContent":"## Social.getr\n`Social.getr` is just a wrapper helper for `Social.get`, it appends `**` to each of the path pattern.\n\n<WidgetEditor>\n\n```js\nconst profile = Social.getr(\"influencer.testnet/profile\");\n\nreturn (\n  <div>\n    <p>Profile: {JSON.stringify(profile)}</p>\n  </div>\n);","metadata":{"loc":{"lines":{"from":88,"to":100}}}}],["298",{"pageContent":"```\n\n</WidgetEditor>\n\n<details markdown=\"1\">\n<summary> Parameters </summary>\n\n| param      | required     | type               | description                  |\n|------------|--------------|--------------------|------------------------------|\n| `patterns` | **required** | string / string[]  | the path pattern(s)          |\n| `finality` | _optional_   | `\"final\"` / number | the block height or finality |\n| `options`  | _optional_   | object             | the `options` object.        |","metadata":{"loc":{"lines":{"from":101,"to":112}}}}],["299",{"pageContent":":::info options object\n\n- `subscribe` _(optional)_: if true, the data will be refreshed every 5 seconds.\n- `return_deleted` _(optional)_: whether to return deleted values (as `null`). Default is `false`.\n\n:::\n\n</details>\n\n---","metadata":{"loc":{"lines":{"from":114,"to":123}}}}],["300",{"pageContent":"## Social.keys\n\nThe `keys` method allows to get the list of keys that match a pattern. It's useful for querying the data without reading values.\n\nIt also has an additional `options` field that can be used to specify the return type and whether to return deleted keys.\n\n<WidgetEditor height=\"80\">\n\n```js\nconst data = Social.keys(`influencer.testnet/profile/*`, \"final\");\n\nreturn JSON.stringify(data)","metadata":{"loc":{"lines":{"from":125,"to":136}}}}],["301",{"pageContent":"```\n\n</WidgetEditor>\n\n<details markdown=\"1\">\n<summary> Parameters </summary>\n\n`Social.keys` takes up to 3 arguments:","metadata":{"loc":{"lines":{"from":137,"to":144}}}}],["302",{"pageContent":"| param      | required     | type               | description                  |\n|------------|--------------|--------------------|------------------------------|\n| `patterns` | **required** | string / string[]  | the path pattern(s)          |\n| `finality` | _optional_   | `\"final\"` / number | the block height or finality |\n| `options`  | _optional_   | object             | the `options` object.        |\n\n:::info options object","metadata":{"loc":{"lines":{"from":146,"to":152}}}}],["303",{"pageContent":"- `subscribe` _(optional)_: if true, the data will be refreshed every 5 seconds.\n- `return_type` _(optional)_: either `\"History\"`, `\"True\"`, or `\"BlockHeight\"`. If not specified, it will return the `\"True\"`.\n- `return_deleted` _(optional)_: whether to return deleted values (as `null`). Default is `false`.\n- `values_only` _(optional)_: whether to return only values (don't include objects). Default is `false`.\n\n:::\n\n</details>","metadata":{"loc":{"lines":{"from":154,"to":161}}}}],["304",{"pageContent":":::tip\nThe Social API server supports custom options `return_type: \"History\"`. For each matching key, it will return an array containing all the block heights when the value was changed in ascending order.\nIt can be used for building a feed, where the values are overwritten. \n:::\n\n---","metadata":{"loc":{"lines":{"from":163,"to":168}}}}],["305",{"pageContent":"## Social.set\n\nTakes a `data` object and commits it to SocialDB. The data object can contain multiple keys, and each key can contain multiple values.\n\nImportantly, a user can only commit to **their own** space in `SocialDB` (e.g. `alice.near` can only write in `alice.near/**`), except if [**given explicit permission**](https://github.com/NearSocial/social-db#permissions) by the owner of another space.","metadata":{"loc":{"lines":{"from":170,"to":174}}}}],["306",{"pageContent":"Each time a user wants to commit data, they will be prompted to confirm the action. On confirming, the user can choose to not be asked again in the future.\n\n<WidgetEditor>\n\n```js\nconst onClick = () => {\n  Social.set({\n    post: {\n      main: JSON.stringify({\n        type: \"md\",\n        text: \"I've read the docs!\"\n      })\n    }\n  })\n}\n\nif(!context.accountId) return \"Please login...\";","metadata":{"loc":{"lines":{"from":176,"to":192}}}}],["307",{"pageContent":"return <>\n  <p> Save a message showing some love to the NEAR Docs </p>\n  <button onClick={onClick}> Save the Message </button>\n</>","metadata":{"loc":{"lines":{"from":194,"to":197}}}}],["308",{"pageContent":"```\n\n</WidgetEditor>\n\n<details markdown=\"1\">\n<summary> Parameters </summary>\n\n`Social.set` arguments:","metadata":{"loc":{"lines":{"from":198,"to":205}}}}],["309",{"pageContent":"| param     | required     | type   | description                                                                                        |\n |-----------|--------------|--------|----------------------------------------------------------------------------------------------------|\n | `data`    | **required** | object | the data object to be committed. Similar to `CommitButton`, it shouldn't start with an account ID. |","metadata":{"loc":{"lines":{"from":207,"to":209}}}}],["310",{"pageContent":"| `options` | _optional_   | object | optional object.                                                                                   |","metadata":{"loc":{"lines":{"from":210,"to":210}}}}],["311",{"pageContent":":::info options object\n\n- `force` _(optional)_: whether to overwrite the data.\n- `onCommit` _(optional)_: function to trigger on successful commit. Will pass the\ndata that was written (including `accountID`).\n- `onCancel` _(optional)_: function to trigger if the user cancels the commit.\n\n:::\n\n</details>","metadata":{"loc":{"lines":{"from":212,"to":221}}}}],["312",{"pageContent":":::tip\nBy default `Social.set` will omit saving data that is already saved (e.g. if the user already liked a post, it won't save the like again). To force saving the data, pass the `force` option.\n:::\n\n---","metadata":{"loc":{"lines":{"from":223,"to":227}}}}],["313",{"pageContent":"## Social.index\nNEAR Social readily provides an indexer - a service that listen to actions in SocialDB, and caches them so they can be retrieved without needing to interact with the contract.\n\nThe indexer is very useful, for example, to rapidly store and retrieve information on all comments for a post. Without the indexer, we would need to check all entries in the contract to see who answered, surely running out of GAS before completion.\n\n<hr className=\"subsection\" />","metadata":{"loc":{"lines":{"from":229,"to":234}}}}],["314",{"pageContent":"### Indexing an Action\nTo index an action we need to add the `index` key to the data being saved, within the `index` key we will save the `action` being indexed, alongside a `key` and a `value` that identifies this specific instance.\n\n<WidgetEditor>\n\n```js\n// General form of an indexed action\n// {\n//   index: {\n//     actionName: JSON.stringify({ key, value })\n//   }\n// }","metadata":{"loc":{"lines":{"from":236,"to":247}}}}],["315",{"pageContent":"const onClick = () => {\n  Social.set({\n    index: {\n      readDocs: JSON.stringify({key: \"docs\", value: \"like\"})\n    } ,\n  })\n}\n\nreturn <>\n  {context.accountId ?\n  <>\n    <p> Index an action showing some love to the NEAR Docs </p>\n    <button onClick={onClick}> Index Action </button>\n  </> :\n  <p> Login to index an action </p>}\n</>","metadata":{"loc":{"lines":{"from":249,"to":264}}}}],["316",{"pageContent":"```\n\n</WidgetEditor>\n\nIn the example above we index a `docs` action. In this case the `action` is `docs`, and the `key` that identifies it is `\"read\"`.\n\n<details markdown=\"1\">\n\n<summary> Standards </summary>","metadata":{"loc":{"lines":{"from":265,"to":273}}}}],["317",{"pageContent":"#### Indexing a Post\nTo index a post, the standard is to save the action `post`, with `{key: \"main\", value: {type: \"md\"}`.\n\n```js\n{\n  index: {\n    post: JSON.stringify({\n      key: \"main\",\n      value: {type: \"md\"}\n    })\n  }\n}\n```","metadata":{"loc":{"lines":{"from":275,"to":287}}}}],["318",{"pageContent":"#### Indexing a Like\nTo index a like, the standard is to save the action `like`, with `{key: object-representing-the-post, value: {type: \"like\" }}`\n\n```js\n{\n  index: {\n    like: JSON.stringify({\n      key: {type: 'social', path: 'influencer.testnet/post/main', blockHeight: 152959480 },\n      value: {type: \"like\"}})\n  }\n}\n```\n\n</details>\n\n<hr className=\"subsection\" />","metadata":{"loc":{"lines":{"from":289,"to":304}}}}],["319",{"pageContent":"### Retrieving Indexed Actions\n\nTo retrieve indexed actions we use the `Social.index` method. It takes the `action` and the `key` as arguments, and returns an array of all the indexed values alongside the `blockHeight` in which they were indexed, and which user made the action.\n\n\n<WidgetEditor>\n\n```js\nconst readDocs = Social.index(\"readDocs\", \"docs\")\n\nreturn <>\n  <p> Number of indexed \"readDocs\" actions with key \"docs\": {readDocs.length} </p>","metadata":{"loc":{"lines":{"from":306,"to":317}}}}],["320",{"pageContent":"<b>Indexed actions</b>\n  {JSON.stringify(readDocs)}\n</>","metadata":{"loc":{"lines":{"from":319,"to":321}}}}],["321",{"pageContent":"```\n\n</WidgetEditor>\n\n\n<details markdown=\"1\">\n<summary> Parameters </summary>\n\n`Social.index` arguments:","metadata":{"loc":{"lines":{"from":322,"to":330}}}}],["322",{"pageContent":"| param     | required     | type   | description                                                                                |\n |-----------|--------------|--------|--------------------------------------------------------------------------------------------|\n | `action`  | **required** | string | is the `index_type` from the standard, e.g. in the path `index/like` the action is `like`. |","metadata":{"loc":{"lines":{"from":332,"to":334}}}}],["323",{"pageContent":"| `key`     | **required** | string | is the inner indexed value from the standard.                                              |\n | `options` | _optional_   | object | the `options` object.                                                                      |","metadata":{"loc":{"lines":{"from":335,"to":336}}}}],["324",{"pageContent":":::info options object","metadata":{"loc":{"lines":{"from":338,"to":338}}}}],["325",{"pageContent":"- `subscribe` _(optional)_: if true, the data will be refreshed every 5 seconds.\n- `accountId` _(optional)_: If given, it should either be a string or an array of account IDs to filter values by them. Otherwise, not filters by account Id.\n- `order` _(optional)_: Either `asc` or `desc`. Defaults to `asc`.\n- `limit` _(optional)_: Defaults to `100`. The number of values to return. Index may return more than index values, if the last elements have the same block height.","metadata":{"loc":{"lines":{"from":340,"to":343}}}}],["326",{"pageContent":"- `from` _(optional)_: Defaults to `0` or `Max` depending on order.","metadata":{"loc":{"lines":{"from":344,"to":344}}}}],["327",{"pageContent":":::\n\n</details>","metadata":{"loc":{"lines":{"from":346,"to":348}}}}],["328",{"pageContent":"---\nid: state\ntitle: Basics\n---\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport {WidgetEditor} from \"@site/src/components/widget-editor\"\n\nBorrowing from React, Near Components use hooks such as [**`useState`**](#state) and [**`useEffect`**](#useeffect-hook) to handle the state's logic, and [**props**](#props) to receive parameters.","metadata":{"loc":{"lines":{"from":1,"to":9}}}}],["329",{"pageContent":"Near Components are stored in the blockchain, for which you will use the `NEAR VM` to [retrieve and execute them in the browser](../../2.develop/integrate/frontend-components.md).\n\nUsing a VM enforces components to be sandboxed, making them very secure since they cannot access your `LocalStorage` or other elements in the page they are incorporated to. However, because of this, components cannot import external libraries. However, they can [**import functions**](#import) from other components.","metadata":{"loc":{"lines":{"from":11,"to":13}}}}],["330",{"pageContent":"---","metadata":{"loc":{"lines":{"from":15,"to":15}}}}],["331",{"pageContent":"## State\nTo handle the component's state you can use `useState` hook. The `useState` hook returns a tuple of two values: the current state and a function that updates it.\n\n<WidgetEditor>\n\n```jsx\nconst [count, setCount] = useState(0);\n\nreturn (\n  <div>\n    <p>You clicked {count} times</p>\n    <button onClick={() => setCount(count + 1)}>Click me</button>\n  </div>\n);","metadata":{"loc":{"lines":{"from":17,"to":30}}}}],["332",{"pageContent":"```\n\n</WidgetEditor>\n\nEach time a state variable is updated, the component will be **re-rendered**. This means that the **whole code will run again**.\n\n---","metadata":{"loc":{"lines":{"from":32,"to":38}}}}],["333",{"pageContent":"## Props\nEach component has access to a local variable named `props` which holds the properties received as input when the component is composed.\n\n<WidgetEditor id='2'>\n\n```jsx\nreturn <>\n  <p> This component props: {JSON.stringify(props)} </p>\n  <Widget src=\"influencer.testnet/widget/Greeter\" \n          props={{name: \"Maria\", amount: 2}} />\n</>\n```\n\n</WidgetEditor>\n\n---","metadata":{"loc":{"lines":{"from":40,"to":55}}}}],["334",{"pageContent":"## useEffect Hook\n\nThe [`useEffect` hook](https://react.dev/learn/synchronizing-with-effects) is used to handle side effects. It will execute each time one of the dependencies changes.\n\n<WidgetEditor id='3'>\n\n```jsx\nconst [count, setCount] = useState(0);\nconst [visible, setVisible] = useState(false);\n\nuseEffect(() => {\n  if(count > 5) setVisible(true);\n}, [count]);","metadata":{"loc":{"lines":{"from":57,"to":69}}}}],["335",{"pageContent":"return (\n  <div>\n    <p>You clicked {count} times</p>\n    <p className=\"alert alert-danger\" hidden={!visible}>\n      You clicked more than 5 times\n    </p>\n    <button onClick={() => setCount(count + 1)}>Click me</button>\n  </div>\n);  \n```\n</WidgetEditor>\n\n---","metadata":{"loc":{"lines":{"from":71,"to":83}}}}],["336",{"pageContent":"## Import\n\nComponents can import functions from other components. This is useful to reuse code and to create libraries of components.\n\n<WidgetEditor id='4'>\n\n```jsx\nconst {add, multiply} = VM.require('influencer.testnet/widget/Math');\n\nreturn <>\n  <p> 2 + 3 = {add(2, 3)} </p>\n  <p> 2 * 3 = {multiply(2, 3)} </p>\n</>","metadata":{"loc":{"lines":{"from":85,"to":97}}}}],["337",{"pageContent":"```\n\n</WidgetEditor>\n\nWhere the code of the `Math` component is:\n\n```js\nfunction add(a, b) {\n  return a + b;\n}\n\nfunction multiply(a, b) {\n  return a * b;\n}\n\nreturn { add, multiply };\n```","metadata":{"loc":{"lines":{"from":98,"to":114}}}}],["338",{"pageContent":"---\nid: web-methods\ntitle: Web Browser Methods\n---\n\nimport {WidgetEditor} from \"@site/src/components/widget-editor\"\n\nNEAR Components have access to classic web methods that enable them to:\n- [Fetch](#fetch) data from external sources.\n- [Cache](#cache) values to avoid redundant computations.\n- Use [LocalStorage](#localstorage) to store data in the web browser.\n- Access to the [Clipboard](#clipboard).\n\n---","metadata":{"loc":{"lines":{"from":1,"to":14}}}}],["339",{"pageContent":"## Fetch\n\n`fetch` allows to fetch data from the URL. It acts like a hook. It's a wrapper around the `fetch` function from the browser behind the caching layer. \n\nThe possible returned values are:\n- If the data is not cached, it returns `null` and fetches the data in the background.\n- If the data is cached, it returns the cached value and then revalidates it.\n\n<WidgetEditor height=\"80\">\n\n```js\nconst res = fetch(\"https://rpc.mainnet.near.org/status\");\n\nreturn res.body;","metadata":{"loc":{"lines":{"from":16,"to":29}}}}],["340",{"pageContent":"```\n\n</WidgetEditor>\n\n<hr className=\"subsection\" />","metadata":{"loc":{"lines":{"from":30,"to":34}}}}],["341",{"pageContent":"#### Async Version\n\n`asyncFetch` is the `async` version of [`fetch`](#fetch), meaning that it returns a promise instead of a value.\n\n<WidgetEditor height=\"80\">\n\n```js\nconst [uptime, setUptime] = useState(null);\n\nfunction reportUptime() {\n  const promise = asyncFetch(\"https://rpc.mainnet.near.org/status\")\n  \n  promise.then(\n    res => { setUptime(res.body.uptime_sec) }\n  );\n}","metadata":{"loc":{"lines":{"from":36,"to":51}}}}],["342",{"pageContent":"return <>\n  <p> {uptime? `Uptime: ${uptime}s` : `Fetch a value` } </p>\n  <button onClick={reportUptime}>Fetch uptime</button>\n</>","metadata":{"loc":{"lines":{"from":53,"to":56}}}}],["343",{"pageContent":"```\n\n</WidgetEditor>\n\n:::tip\nIn contrast with `fetch`, `asyncFetch` does **not** cache the resulting value, so it should only be used within a function to avoid frequent requests on every render.\n:::\n\n---","metadata":{"loc":{"lines":{"from":57,"to":65}}}}],["344",{"pageContent":"## Cache\n\nThe `useCache` hook takes a promise through a generator function, fetches the data and caches it. It can be used to easily use and cache data from async data sources.\n\nThe cache is global for the VM, but each cached element is identified by a unique `dataKey` within each component. \n\nThe possible values returned are:\n- `null` if the cache is cold and data is fetching\n- the `cached value` while the data is being fetched \n- A new `value` if new data is fetched.\n\n<WidgetEditor>","metadata":{"loc":{"lines":{"from":67,"to":78}}}}],["345",{"pageContent":"```js\nconst status = useCache(\n  () =>\n    asyncFetch(\"https://rpc.mainnet.near.org/status\").then((res) => res.body),\n  \"mainnetRpcStatus\",\n  { subscribe: true }\n);\n\nreturn status;","metadata":{"loc":{"lines":{"from":80,"to":88}}}}],["346",{"pageContent":"```\n\n</WidgetEditor>\n\n<details markdown=\"1\">\n<summary> Parameters </summary>","metadata":{"loc":{"lines":{"from":89,"to":94}}}}],["347",{"pageContent":"| param              | required     | type   | description                                                          |\n|--------------------|--------------|--------|----------------------------------------------------------------------|\n| `promiseGenerator` | **required** | object | a function that returns a promise, which generates data.             |\n| `dataKey`          | **required** | object | the unique name (within the current component) to identify the data. |","metadata":{"loc":{"lines":{"from":96,"to":99}}}}],["348",{"pageContent":"| `options`          | _optional_   | object | optional argument.                                                   |","metadata":{"loc":{"lines":{"from":100,"to":100}}}}],["349",{"pageContent":":::info options object\n\n- `subscribe` _(optional)_: if `true`, the data refreshes periodically by invalidating cache.\n\n:::\n\n:::note\n- `promiseGenerator`: you don't return the promise directly, because it should only be fired once.\n:::\n\n</details>\n\n:::tip\nThe [fetch](#fetch) method is built on top of the `useCache` hook.\n:::\n\n:::note\nThe data is being cached and compared as JSON serialized objects.\n:::\n\n---","metadata":{"loc":{"lines":{"from":102,"to":122}}}}],["350",{"pageContent":"## LocalStorage\n\nNEAR Components have access to a simulated `localStorage` through the `Storage` object:\n\n- [`Storage.get`](#storageget)\n- [`Storage.set`](#storageset)\n- [`Storage.privateGet`](#storageprivateget)\n- [`Storage.privateSet`](#storageprivateset)\n\n<WidgetEditor>\n\n```jsx\nconst [time, setTime] = useState(stored || Date.now()) \n\nconst storeValue = () => {\n  const date = Date.now();\n  Storage.set('time_now', date)\n}","metadata":{"loc":{"lines":{"from":124,"to":141}}}}],["351",{"pageContent":"return <>\n  <p> Time Now: {Date.now()} </p>\n  <p> Time Stored: {Storage.get('time_now')} </p>\n  <button onClick={storeValue}>Store Date.now()</button>\n</>","metadata":{"loc":{"lines":{"from":143,"to":147}}}}],["352",{"pageContent":"```\n\n</WidgetEditor>\n\n<details markdown=\"1\">\n<summary> Parameters </summary>","metadata":{"loc":{"lines":{"from":148,"to":153}}}}],["353",{"pageContent":"#### Storage.get\n\n`Storage.get(key, widgetSrc?)` - returns the public value for a given key under the given widgetSrc or the current component if `widgetSrc` is omitted. Can only read public values.\n\n | param       | required     | type   | description              |\n |-------------|--------------|--------|--------------------------|\n | `key`       | **required** | object | a user-defined key       |\n | `widgetSrc` | _optional_   | object | a user-defined component |\n\n---","metadata":{"loc":{"lines":{"from":155,"to":164}}}}],["354",{"pageContent":"#### Storage.set\n\n`Storage.set(key, value)` - sets the public value for a given key under the current widget. The value will be public, so other widgets can read it.\n\n | param   | required     | type   | description          |\n |---------|--------------|--------|----------------------|\n | `key`   | **required** | object | a user-defined key   |\n | `value` | **required** | object | a user-defined value |\n\n---","metadata":{"loc":{"lines":{"from":166,"to":175}}}}],["355",{"pageContent":"#### Storage.privateGet\n\n`Storage.privateGet(key)` - returns the private value for a given key under the current component.\n\n | param | required     | type   | description                                    |\n |-------|--------------|--------|------------------------------------------------|\n | `key` | **required** | object | a user-defined key under the current component |\n\n---","metadata":{"loc":{"lines":{"from":177,"to":185}}}}],["356",{"pageContent":"#### Storage.privateSet\n\n`Storage.privateSet(key, value)` - sets the private value for a given key under the current component. The value is private, only the current component can read it.\n\n:::note\nPrivate and public values can share the same key and don't conflict.\n:::","metadata":{"loc":{"lines":{"from":187,"to":193}}}}],["357",{"pageContent":"| param   | required     | type   | description                                    |\n |---------|--------------|--------|------------------------------------------------|\n | `key`   | **required** | object | a user-defined key under the current component |\n | `value` | **required** | object | a user-defined value                           |\n\n</details>\n\n---","metadata":{"loc":{"lines":{"from":195,"to":202}}}}],["358",{"pageContent":"## Clipboard\n\nNEAR Components can **write** data to the system's clipboard through the `clipboard.writeText` method.\n\nWriting to the clipboard is **only** allowed in **trusted actions**, for example, when the user clicks a button.\n\n<WidgetEditor>\n\n```js\nconst copyToClipboard = (test) => { clipboard.writeText(\"Hello World!\") }\n\nreturn <>\n    <button onClick={copyToClipboard}> Copy </button>\n    <textarea className=\"form-control mt-2\" placeholder=\"Test pasting here\" />\n</>\n```\n\n</WidgetEditor>","metadata":{"loc":{"lines":{"from":204,"to":221}}}}]]